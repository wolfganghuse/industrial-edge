---
# Source: pipelines/templates/configmaps/environment.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: environment
data:
  DESCRIPTION: "Config keys for openshift-pipelines"
  IMAGE_PROVIDER: quay.io
  IMAGE_ACCOUNT: PLAINTEXT
  GIT_EMAIL: SOMEWHERE@EXAMPLE.COM
  GIT_DEV_REPO_URL: https://github.com/PLAINTEXT/manuela-dev.git
  GIT_DEV_REPO_REVISION: main
  GIT_OPS_REPO_TEST_URL: https://github.com/pattern-clone/mypattern
  GIT_OPS_REPO_TEST_REVISION: main
  GIT_OPS_REPO_PROD_URL: https://github.com/pattern-clone/mypattern
  GIT_OPS_REPO_PROD_REVISION: main
  IOT_CONSUMER_IMAGE: iot-consumer
  IOT_CONSUMER_YAML_PATH: ".iot_consumer.tag"
  IOT_CONSUMER_BUILT_TAGS_PATH: .iot_consumer.built_tags
  IOT_CONSUMER_TEST_VALUES_PATH: overrides/values-test-imagedata.yaml
  IOT_CONSUMER_PROD_VALUES_PATH: overrides/values-prod-imagedata.yaml
  IOT_FRONTEND_IMAGE: iot-frontend
  IOT_FRONTEND_YAML_PATH: ".iot_frontend.tag"
  IOT_FRONTEND_BUILT_TAGS_PATH: ".iot_frontend.built_tags"
  IOT_FRONTEND_TEST_VALUES_PATH: overrides/values-test-imagedata.yaml
  IOT_FRONTEND_PROD_VALUES_PATH: overrides/values-prod-imagedata.yaml
  IOT_SWSENSOR_IMAGE: iot-software-sensor
  IOT_SWSENSOR_YAML_PATH: ".machine_sensor.tag"
  IOT_SWSENSOR_BUILT_TAGS_PATH: .machine_sensor.built_tags
  IOT_SWSENSOR_TEST_VALUES_PATH: overrides/values-test-imagedata.yaml
  IOT_SWSENSOR_PROD_VALUES_PATH: overrides/values-prod-imagedata.yaml
  IOT_ANOMALY_IMAGE: iot-anomaly-detection
  IOT_ANOMALY_YAML_PATH: ".iot_anomaly_detection.tag"
  IOT_ANOMALY_BUILT_TAGS_PATH: .iot_anomaly_detection.built_tags
  IOT_ANOMALY_TEST_VALUES_PATH: overrides/values-test-imagedata.yaml
  IOT_ANOMALY_PROD_VALUES_PATH: overrides/values-prod-imagedata.yaml

#   IOT_CONSUMER_IMAGE: iot-consumer
#   IOT_CONSUMER_YAML_PATH: 'images(name==messaging).newTag'
#   IOT_CONSUMER_TEST_VALUES_PATH: charts/datacenter/manuela-tst/kustomization.yaml
#   IOT_CONSUMER_PROD_VALUES_PATH: charts/factory/manuela-stormshift/kustomization.yaml
#   IOT_CONSUMER_PROD_IMAGESTREAM_PATH: charts/factory/manuela-stormshift/templates/messaging/messaging-is.yaml
#   IOT_FRONTEND_IMAGE: iot-frontend
#   IOT_FRONTEND_YAML_PATH: 'images(name==line-dashboard).newTag'
#   IOT_FRONTEND_TEST_VALUES_PATH: charts/datacenter/manuela-tst/kustomization.yaml
#   IOT_FRONTEND_PROD_VALUES_PATH: charts/factory/manuela-stormshift/kustomization.yaml
#   IOT_FRONTEND_PROD_IMAGESTREAM_PATH: charts/factory/manuela-stormshift/templates/line-dashboard/line-dashboard-is.yaml
#   IOT_SWSENSOR_IMAGE: iot-software-sensor
#   IOT_SWSENSOR_YAML_PATH: 'images(name==machine-sensor).newTag'
#   IOT_SWSENSOR_TEST_VALUES_PATH: charts/datacenter/manuela-tst/kustomization.yaml
#   IOT_SWSENSOR_PROD_VALUES_PATH: charts/factory/manuela-stormshift/kustomization.yaml
#   IOT_SWSENSOR_PROD_IMAGESTREAM_PATH: charts/factory/manuela-stormshift/templates/machine-sensor/machine-sensor-is.yaml
#   IOT_ANOMALY_IMAGE: iot-anomaly-detection
#   IOT_ANOMALY_YAML_PATH: 'images(name==anomaly-detection).newTag'
#   IOT_ANOMALY_TEST_VALUES_PATH: charts/datacenter/manuela-tst/kustomization.yaml
#   IOT_ANOMALY_PROD_VALUES_PATH: charts/factory/manuela-stormshift/kustomization.yaml
#   IOT_ANOMALY_PROD_IMAGESTREAM_PATH: charts/factory/manuela-stormshift/templates/anomaly-detection/anomaly-detection-is.yaml
---
# Source: pipelines/templates/persistent-volume-claims/build-artifacts.rwo.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: build-artifacts-rwo
spec:
  resources:
    requests:
      storage: 1Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
---
# Source: pipelines/templates/persistent-volume-claims/gitrepos.rwo.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: gitrepos-rwo
spec:
  resources:
    requests:
      storage: 1Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
---
# Source: pipelines/templates/pipeline-from-manuela-ci-to-manuela-tst-all.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: admin
  namespace: manuela-tst-all
subjects:
  - kind: ServiceAccount
    name: pipeline
    namespace: manuela-ci
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: admin
---
# Source: pipelines/templates/pipelines/build-and-test-iot-anomaly-detection.yaml
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: build-and-test-iot-anomaly-detection
spec:
  workspaces:
  - name: gitrepos
  - name: config
  - name: build-artifacts
  - name: argocd-env-secret
  params:
  - name: DEV_REVISION
    type: string
    default: main
  - name: OPS_REVISION
    type: string
    default: main

  tasks:
  - name: git-clone-dev
    taskRef:
      name: git-clone-with-tags
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: url_configmapkey
      value: GIT_DEV_REPO_URL
    - name: revision
      value: main
    - name: subdirectory
      value: dev
    - name: deleteExisting
      value: "true"

  - name: git-clone-ops
    taskRef:
      name: git-clone-with-tags
    runAfter:
    - git-clone-dev
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: url_configmapkey
      value: GIT_OPS_REPO_TEST_URL
    - name: revision
      value: main
    - name: subdirectory
      value: ops
    - name: deleteExisting
      value: "true"

  - name: bump-build-version-iot-anomaly
    taskRef:
      name: bumpversion
    runAfter:
    - git-clone-ops
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    params:
    - name: component_name
      value: iot-anomaly
    - name: version_file_path
      value: components/iot-anomaly-detection/VERSION

  - name: s2i-build-iot-anomaly
    taskRef:
      name: s2i
    runAfter:
    - bump-build-version-iot-anomaly
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: build-artifacts
      workspace: build-artifacts
    params:
    - name: TLSVERIFY
      value: "false"
    - name: PATH_CONTEXT
      value: components/iot-anomaly-detection
    - name: BUILDER_IMAGE
      value: registry.access.redhat.com/rhscl/python-36-rhel7
    - name: TAG
      value: $(tasks.bump-build-version-iot-anomaly.results.image-tag)
    - name: OUTPUT_IMAGE
      value: image-registry.openshift-image-registry.svc:5000/manuela-tst-all/anomaly-detection

  - name: copy-image-to-remote-registry-iot-anomaly
    taskRef:
      name: skopeo-copy
    runAfter:
    - s2i-build-iot-anomaly
    workspaces:
    - name: config
      workspace: config
    params:
    - name: TAG
      value: $(tasks.bump-build-version-iot-anomaly.results.image-tag)
    - name: SOURCE_IMAGE
      value: image-registry.openshift-image-registry.svc:5000/manuela-tst-all/anomaly-detection
    - name: TARGET_IMAGE_CONFIGMAPKEY
      value: IOT_ANOMALY_IMAGE

  - name: push-dev-tag
    taskRef:
      name: github-push
    runAfter:
    - copy-image-to-remote-registry-iot-anomaly
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    params:
    - name: PUSH_FLAGS
      value: --tags

  - name: modify-ops-test-iot-anomaly
    taskRef:
      name: gitops-imagetag
    runAfter:
    - push-dev-tag
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: CONFIGMAP_PREFIX
      value: IOT_ANOMALY
    - name: ENVIRONMENT
      value: TEST
    - name: TAG
      value: $(tasks.bump-build-version-iot-anomaly.results.image-tag)
    - name: subdirectory
      value: ops

  - name: commit-ops
    taskRef:
      name: git-commit
    runAfter:
    - modify-ops-test-iot-anomaly
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: subdirectory
      value: ops

  - name: push-ops
    taskRef:
      name: github-push
    runAfter:
    - commit-ops
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    params:
    - name: subdirectory
      value: ops

  - name: argocd-sync-application
    taskRef:
      name: argocd-sync-and-wait
    runAfter:
    - push-ops
    workspaces:
    - name: argocd-env-secret
      workspace: argocd-env-secret
    params:
    - name: application-name
      #value: manuela-test-mypattern-example
      value: manuela-test
    - name: flags
      value: --insecure
    - name: argocd-version
      value: "v1.5.2"
    - name: revision
      value: $(params.OPS_REVISION)
    - name: argocd-server
      #value: datacenter-gitops-server.industrial-edge-datacenter.svc
      value: "example-gitops-server.mypattern-example.svc"

  - name: test-all
    taskRef:
      name: tkn
    runAfter:
    - argocd-sync-application
    params:
    - name: ARGS
      value:
      - pipeline
      - start
      - test-all
      - --showlog
      - --nocolour

  - name: trigger-staging
    taskRef:
      name: openshift-instantiate-template
    runAfter:
    - test-all
    params:
    - name: TEMPLATE
      value: stage-production-pipelinerun
    - name: PARAMS
      value: -p TAG=$(tasks.bump-build-version-iot-anomaly.results.image-tag) -p CONFIGMAP_PREFIX=IOT_ANOMALY -p SOURCE_IMAGE=image-registry.openshift-image-registry.svc:5000/manuela-tst-all/anomaly-detection -p COMPONENT_NAME=iot-anomaly-detection

  - name: cleanup
    taskRef:
      name: cleanup
    runAfter:
    - trigger-staging
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: subdirectory
      value: dev
    - name: COMPONENT_NAME
      value: iot-anomaly-detection
---
# Source: pipelines/templates/pipelines/build-and-test-iot-consumer.yaml
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: build-and-test-iot-consumer
spec:
  workspaces:
  - name: gitrepos
  - name: config
  - name: build-artifacts
  - name: argocd-env-secret
  params:
  - name: DEV_REVISION
    type: string
    default: main
  - name: OPS_REVISION
    type: string
    default: main

  tasks:
  - name: git-clone-dev
    taskRef:
      name: git-clone-with-tags
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: url_configmapkey
      value: GIT_DEV_REPO_URL
    - name: revision
      value: main
    - name: subdirectory
      value: dev
    - name: deleteExisting
      value: "true"

  - name: git-clone-ops
    taskRef:
      name: git-clone-with-tags
    runAfter:
    - git-clone-dev
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: url_configmapkey
      value: GIT_OPS_REPO_TEST_URL
    - name: revision
      value: main
    - name: subdirectory
      value: ops
    - name: deleteExisting
      value: "true"

  - name: bump-build-version-iot-consumer
    taskRef:
      name: bumpversion
    runAfter:
    - git-clone-ops
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    params:
    - name: component_name
      value: iot-consumer
    - name: version_file_path
      value: components/iot-consumer/VERSION

  - name: s2i-build-iot-consumer
    taskRef:
      name: s2i
    runAfter:
    - bump-build-version-iot-consumer
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: build-artifacts
      workspace: build-artifacts
    params:
    - name: TLSVERIFY
      value: "false"
    - name: PATH_CONTEXT
      value: components/iot-consumer
    - name: BUILDER_IMAGE
      value: registry.access.redhat.com/rhscl/nodejs-10-rhel7
    - name: TAG
      value: $(tasks.bump-build-version-iot-consumer.results.image-tag)
    - name: OUTPUT_IMAGE
      value: image-registry.openshift-image-registry.svc:5000/manuela-tst-all/messaging

  - name: copy-image-to-remote-registry-iot-consumer
    taskRef:
      name: skopeo-copy
    runAfter:
    - s2i-build-iot-consumer
    workspaces:
    - name: config
      workspace: config
    params:
    - name: TAG
      value: $(tasks.bump-build-version-iot-consumer.results.image-tag)
    - name: SOURCE_IMAGE
      value: image-registry.openshift-image-registry.svc:5000/manuela-tst-all/messaging
    - name: TARGET_IMAGE_CONFIGMAPKEY
      value: IOT_CONSUMER_IMAGE

  - name: push-dev-tag
    taskRef:
      name: github-push
    runAfter:
    - copy-image-to-remote-registry-iot-consumer
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    params:
    - name: PUSH_FLAGS
      value: --tags


  - name: modify-ops-test-iot-consumer
    taskRef:
      name: gitops-imagetag
    runAfter:
    - push-dev-tag
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: CONFIGMAP_PREFIX
      value: IOT_CONSUMER
    - name: ENVIRONMENT
      value: TEST
    - name: TAG
      value: $(tasks.bump-build-version-iot-consumer.results.image-tag)
    - name: subdirectory
      value: ops

  - name: commit-ops
    taskRef:
      name: git-commit
    runAfter:
    - modify-ops-test-iot-consumer
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: subdirectory
      value: ops

  - name: push-ops
    taskRef:
      name: github-push
    runAfter:
    - commit-ops
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    params:
    - name: subdirectory
      value: ops

  - name: argocd-sync-application
    taskRef:
      name: argocd-sync-and-wait
    runAfter:
    - push-ops
    workspaces:
    - name: argocd-env-secret
      workspace: argocd-env-secret
    params:
    - name: application-name
      #value: manuela-test-mypattern-example
      value: manuela-test
    - name: flags
      value: --insecure
    - name: argocd-version
      value: "v1.5.2"
    - name: revision
      value: $(params.OPS_REVISION)
    - name: argocd-server
      #value: datacenter-gitops-server.industrial-edge-datacenter.svc
      value: "example-gitops-server.mypattern-example.svc"

  - name: test-all
    taskRef:
      name: tkn
    runAfter:
    - argocd-sync-application
    params:
    - name: ARGS
      value:
      - pipeline
      - start
      - test-all
      - --showlog
      - --nocolour


  - name: trigger-staging
    taskRef:
      name: openshift-instantiate-template
    runAfter:
    - test-all
    params:
    - name: TEMPLATE
      value: stage-production-pipelinerun
    - name: PARAMS
      value: -p TAG=$(tasks.bump-build-version-iot-consumer.results.image-tag) -p CONFIGMAP_PREFIX=IOT_CONSUMER -p SOURCE_IMAGE=image-registry.openshift-image-registry.svc:5000/manuela-tst-all/messaging -p COMPONENT_NAME=iot-consumer

  - name: cleanup
    taskRef:
      name: cleanup
    runAfter:
    - trigger-staging
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: subdirectory
      value: dev
    - name: COMPONENT_NAME
      value: iot-consumer
---
# Source: pipelines/templates/pipelines/build-and-test.yaml
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: build-and-test
spec:
  workspaces:
  - name: gitrepos
  - name: config
  - name: argocd-env-secret
  - name: build-artifacts
  params:
  - name: DEV_REVISION
    type: string
    default: main
  - name: OPS_REVISION
    type: string
    default: main
  tasks:
  - name: build-base-images
    taskRef:
      name: tkn
    params:
    - name: ARGS
      value:
      - pipeline
      - start
      - build-base-images
      - --param
      - PATH_CONTEXT=tekton/images/httpd-ionic
      - --param
      - DEV_REVISION=$(params.DEV_REVISION)
      - --param
      - OUTPUT_IMAGE_PROVIDER_CONFIGMAPKEY=IMAGE_PROVIDER
      - --param
      - OUTPUT_IMAGE_ACCOUNT_CONFIGMAPKEY=IMAGE_ACCOUNT
      - --param
      - OUTPUT_IMAGE_NAME=httpd-ionic
      - --workspace
      - name=gitrepos,claimName=gitrepos-rwo
      - --workspace
      - name=config,config=environment
      - --showlog
      - --nocolour

  - name: build-iot-anomaly-detection
    runAfter:
      - build-base-images
    taskRef:
      name: tkn
    params:
    - name: ARGS
      value:
      - pipeline
      - start
      - build-iot-anomaly-detection
      - --workspace
      - name=gitrepos,claimName=gitrepos-rwo
      - --workspace
      - name=config,config=environment
      - --workspace
      - name=build-artifacts,claimName=build-artifacts-rwo
      - --showlog
      - --nocolour

  - name: build-iot-consumer
    runAfter:
      - build-iot-anomaly-detection
    taskRef:
      name: tkn
    params:
    - name: ARGS
      value:
      - pipeline
      - start
      - build-iot-consumer
      - --workspace
      - name=gitrepos,claimName=gitrepos-rwo
      - --workspace
      - name=config,config=environment
      - --workspace
      - name=build-artifacts,claimName=build-artifacts-rwo
      - --showlog
      - --nocolour

  - name: build-iot-frontend
    runAfter:
      - build-iot-consumer
    taskRef:
      name: tkn
    params:
    - name: ARGS
      value:
      - pipeline
      - start
      - build-iot-frontend
      - --workspace
      - name=gitrepos,claimName=gitrepos-rwo
      - --workspace
      - name=config,config=environment
      - --workspace
      - name=build-artifacts,claimName=build-artifacts-rwo
      - --showlog
      - --nocolour

  - name: build-iot-software-sensor
    runAfter:
      - build-iot-frontend
    taskRef:
      name: tkn
    params:
    - name: ARGS
      value:
      - pipeline
      - start
      - build-iot-software-sensor
      - --workspace
      - name=gitrepos,claimName=gitrepos-rwo
      - --workspace
      - name=config,config=environment
      - --workspace
      - name=build-artifacts,claimName=build-artifacts-rwo
      - --showlog
      - --nocolour

  - name: git-clone-dev
    runAfter:
      - build-iot-software-sensor
    taskRef:
      name: git-clone-with-tags
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: url_configmapkey
      value: GIT_DEV_REPO_URL
    - name: revision
      value: $(params.DEV_REVISION)
    - name: subdirectory
      value: dev
    - name: deleteExisting
      value: "true"

  - name: git-clone-gitops
    taskRef:
      name: git-clone-with-tags
    runAfter:
    - git-clone-dev
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: url_configmapkey
      value: GIT_OPS_REPO_TEST_URL
    - name: revision
      value: main
    - name: subdirectory
      value: ops
    - name: deleteExisting
      value: "true"

  - name: bump-build-version
    taskRef:
      name: bumpversion
    runAfter:
    - git-clone-gitops
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    params:
    - name: component_name
      value: iot_consumer
    - name: version_file_path
      value: components/iot-consumer/VERSION

  - name: build-messaging-image
    taskRef:
      name: s2i
    runAfter:
    - bump-build-version
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: build-artifacts
      workspace: build-artifacts
    params:
    - name: TLSVERIFY
      value: "false"
    - name: PATH_CONTEXT
      value: components/iot-consumer
    - name: BUILDER_IMAGE
      value: registry.access.redhat.com/rhscl/nodejs-10-rhel7
    - name: TAG
      value: $(tasks.bump-build-version.results.image-tag)
    - name: OUTPUT_IMAGE
      value: image-registry.openshift-image-registry.svc:5000/manuela-tst-all/messaging
    - name: CHAINED_BUILD_DOCKERFILE
      value: ""

  - name: push-dev-tag
    taskRef:
      name: github-push
    runAfter:
    - build-messaging-image
#    - bump-build-version
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    params:
    - name: PUSH_FLAGS
      value: --tags

  - name: modify-ops-test
    taskRef:
      name: gitops-imagetag
    runAfter:
    - push-dev-tag
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: CONFIGMAP_PREFIX
      value: IOT_CONSUMER
    - name: ENVIRONMENT
      value: TEST
    - name: TAG
      value: $(tasks.bump-build-version.results.image-tag)
    - name: subdirectory
      value: ops

  - name: commit-ops-test
    taskRef:
      name: git-commit
    runAfter:
    - modify-ops-test
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: subdirectory
      value: ops

  - name: push-ops-test
    taskRef:
      name: github-push
    runAfter:
    - commit-ops-test
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    params:
    - name: subdirectory
      value: ops

  - name: argocd-sync-application
    taskRef:
      name: argocd-sync-and-wait
    runAfter:
    - push-ops-test
    workspaces:
    - name: argocd-env-secret
      workspace: argocd-env-secret
    params:
    - name: application-name
      #value: manuela-test-mypattern-example
      value: manuela-test
    - name: flags
      value: --insecure
    - name: argocd-version
      value: "v1.5.2"
    - name: revision
      value: $(params.OPS_REVISION)
    - name: argocd-server
      # datacenter-gitops-server.industrial-edge-datacenter.svc
      value: "hub-gitops-server.mypattern-hub.svc"

  # - name: sensor-broker-test
  #   taskRef:
  #     name: mock
  #     kind: Task
  #   runAfter:
  #     - argocd-sync-application
  #   params:
  #     - name: MESSAGE
  #       value: "succesfully sent messages to broker..."
  # - name: consumer-broker-test
  #   taskRef:
  #     name: mock
  #     kind: Task
  #   runAfter:
  #     - argocd-sync-application
  #   params:
  #     - name: MESSAGE
  #       value: "succesfully processed messages from broker..."
  # - name: consumer-frontend-test
  #   taskRef:
  #     name: mock
  #     kind: Task
  #   runAfter:
  #     - argocd-sync-application
  #   params:
  #     - name: MESSAGE
  #       value: "succesfully executed Websocket APIs..."
  # - name: e2e-test
  #   taskRef:
  #     name: mock
  #     kind: Task
  #   runAfter:
  #     - sensor-broker-test
  #     - consumer-broker-test
  #     - consumer-frontend-test
  #   params:
  #     - name: MESSAGE
  #       value: "e2e testsuite succesfully executed"
  - name: test-all
    taskRef:
      name: tkn
    runAfter:
    - argocd-sync-application
    params:
    - name: ARGS
      value:
      - pipeline
      - start
      - test-all
      - --showlog
      - --nocolour

  - name: trigger-staging
    taskRef:
      name: openshift-instantiate-template
    runAfter:
    - test-all
    params:
    - name: TEMPLATE
      value: stage-production-pipelinerun
    - name: PARAMS
      value: -p TAG=$(tasks.bump-build-version.results.image-tag) -p CONFIGMAP_PREFIX=IOT_CONSUMER -p SOURCE_IMAGE=image-registry.openshift-image-registry.svc:5000/manuela-tst-all/messaging -p COMPONENT_NAME=iot-consumer

  - name: cleanup
    taskRef:
      name: cleanup
    runAfter:
    - trigger-staging
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: subdirectory
      value: dev
    - name: COMPONENT_NAME
      value: iot-consumer
    # - name: OPENSHIFT_NAMESPACE
    #   value: manuela-tst-all
    # - name: OPENSHIFT_IMAGESTREAM
    #   value: messaging
---
# Source: pipelines/templates/pipelines/build-base-images.yaml
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: build-base-images
spec:
  workspaces:
  - name: gitrepos
  - name: config
  params:
  - name: PATH_CONTEXT
    type: string
    default: tekton/images/httpd-ionic
  - name: OUTPUT_IMAGE_PROVIDER_CONFIGMAPKEY
    type: string
    default: IMAGE_PROVIDER
  - name: OUTPUT_IMAGE_ACCOUNT_CONFIGMAPKEY
    type: string
    default: IMAGE_ACCOUNT
  - name: OUTPUT_IMAGE_NAME
    type: string
    default: httpd-ionic
  - name: DEV_REVISION
    type: string
    default: main
  tasks:
  - name: git-clone-dev
    taskRef:
      name: git-clone-with-tags
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: url_configmapkey
      value: GIT_DEV_REPO_URL
    - name: revision
      value: $(params.DEV_REVISION)
    - name: subdirectory
      value: dev
    - name: deleteExisting
      value: "true"

  - name: buildah-build
    taskRef:
      name: buildah
    runAfter:
    - git-clone-dev
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: TLSVERIFY
      value: "false"
    - name: PATH_CONTEXT
      value: $(params.PATH_CONTEXT)
    - name: TAG
      value: latest
    - name: OUTPUT_IMAGE_PROVIDER_CONFIGMAPKEY
      value: $(params.OUTPUT_IMAGE_PROVIDER_CONFIGMAPKEY)
    - name: OUTPUT_IMAGE_ACCOUNT_CONFIGMAPKEY
      value: $(params.OUTPUT_IMAGE_ACCOUNT_CONFIGMAPKEY)
    - name: OUTPUT_IMAGE_NAME
      value: $(params.OUTPUT_IMAGE_NAME)
---
# Source: pipelines/templates/pipelines/build-iot-anomaly-detection.yaml
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: build-iot-anomaly-detection
spec:
  workspaces:
  - name: gitrepos
  - name: config
  - name: build-artifacts

  tasks:
  - name: git-clone-dev
    taskRef:
      name: git-clone-with-tags
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: url_configmapkey
      value: GIT_DEV_REPO_URL
    - name: revision
      value: main
    - name: subdirectory
      value: dev
    - name: deleteExisting
      value: "true"

  - name: git-clone-ops
    taskRef:
      name: git-clone-with-tags
    runAfter:
    - git-clone-dev
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: url_configmapkey
      value: GIT_OPS_REPO_TEST_URL
    - name: revision
      value: main
    - name: subdirectory
      value: ops
    - name: deleteExisting
      value: "true"

  - name: bump-build-version-iot-anomaly
    taskRef:
      name: bumpversion
    runAfter:
    - git-clone-ops
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    params:
    - name: component_name
      value: iot-anomaly
    - name: version_file_path
      value: components/iot-anomaly-detection/VERSION

  - name: s2i-build-iot-anomaly
    taskRef:
      name: s2i
    runAfter:
    - bump-build-version-iot-anomaly
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: build-artifacts
      workspace: build-artifacts
    params:
    - name: TLSVERIFY
      value: "false"
    - name: PATH_CONTEXT
      value: components/iot-anomaly-detection
    - name: BUILDER_IMAGE
      value: registry.access.redhat.com/rhscl/python-36-rhel7
    - name: TAG
      value: $(tasks.bump-build-version-iot-anomaly.results.image-tag)
    - name: OUTPUT_IMAGE
      value: image-registry.openshift-image-registry.svc:5000/manuela-tst-all/anomaly-detection

  - name: copy-image-to-remote-registry-iot-anomaly
    taskRef:
      name: skopeo-copy
    runAfter:
    - s2i-build-iot-anomaly
    workspaces:
    - name: config
      workspace: config
    params:
    - name: TAG
      value: $(tasks.bump-build-version-iot-anomaly.results.image-tag)
    - name: SOURCE_IMAGE
      value: image-registry.openshift-image-registry.svc:5000/manuela-tst-all/anomaly-detection
    - name: TARGET_IMAGE_CONFIGMAPKEY
      value: IOT_ANOMALY_IMAGE

  - name: push-dev-tag
    taskRef:
      name: github-push
    runAfter:
    - copy-image-to-remote-registry-iot-anomaly
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    params:
    - name: PUSH_FLAGS
      value: --tags

  - name: modify-ops-test-iot-anomaly
    taskRef:
      name: gitops-imagetag
    runAfter:
    - push-dev-tag
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: CONFIGMAP_PREFIX
      value: IOT_ANOMALY
    - name: ENVIRONMENT
      value: TEST
    - name: TAG
      value: $(tasks.bump-build-version-iot-anomaly.results.image-tag)
    - name: subdirectory
      value: ops

  - name: commit-ops
    taskRef:
      name: git-commit
    runAfter:
    - modify-ops-test-iot-anomaly
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: subdirectory
      value: ops

  - name: push-ops
    taskRef:
      name: github-push
    runAfter:
    - commit-ops
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    params:
    - name: subdirectory
      value: ops
---
# Source: pipelines/templates/pipelines/build-iot-consumer.yaml
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: build-iot-consumer
spec:
  workspaces:
  - name: gitrepos
  - name: config
  - name: build-artifacts

  tasks:
  - name: git-clone-dev
    taskRef:
      name: git-clone-with-tags
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: url_configmapkey
      value: GIT_DEV_REPO_URL
    - name: revision
      value: main
    - name: subdirectory
      value: dev
    - name: deleteExisting
      value: "true"

  - name: git-clone-ops
    taskRef:
      name: git-clone-with-tags
    runAfter:
    - git-clone-dev
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: url_configmapkey
      value: GIT_OPS_REPO_TEST_URL
    - name: revision
      value: main
    - name: subdirectory
      value: ops
    - name: deleteExisting
      value: "true"

  - name: bump-build-version-iot-consumer
    taskRef:
      name: bumpversion
    runAfter:
    - git-clone-ops
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    params:
    - name: component_name
      value: iot-consumer
    - name: version_file_path
      value: components/iot-consumer/VERSION

  - name: s2i-build-iot-consumer
    taskRef:
      name: s2i
    runAfter:
    - bump-build-version-iot-consumer
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: build-artifacts
      workspace: build-artifacts
    params:
    - name: TLSVERIFY
      value: "false"
    - name: PATH_CONTEXT
      value: components/iot-consumer
    - name: BUILDER_IMAGE
      value: registry.access.redhat.com/rhscl/nodejs-10-rhel7
    - name: TAG
      value: $(tasks.bump-build-version-iot-consumer.results.image-tag)
    - name: OUTPUT_IMAGE
      value: image-registry.openshift-image-registry.svc:5000/manuela-tst-all/messaging

  - name: copy-image-to-remote-registry-iot-consumer
    taskRef:
      name: skopeo-copy
    runAfter:
    - s2i-build-iot-consumer
    workspaces:
    - name: config
      workspace: config
    params:
    - name: TAG
      value: $(tasks.bump-build-version-iot-consumer.results.image-tag)
    - name: SOURCE_IMAGE
      value: image-registry.openshift-image-registry.svc:5000/manuela-tst-all/messaging
    - name: TARGET_IMAGE_CONFIGMAPKEY
      value: IOT_CONSUMER_IMAGE

  - name: push-dev-tag
    taskRef:
      name: github-push
    runAfter:
    - copy-image-to-remote-registry-iot-consumer
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    params:
    - name: PUSH_FLAGS
      value: --tags


  - name: modify-ops-test-iot-consumer
    taskRef:
      name: gitops-imagetag
    runAfter:
    - push-dev-tag
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: CONFIGMAP_PREFIX
      value: IOT_CONSUMER
    - name: ENVIRONMENT
      value: TEST
    - name: TAG
      value: $(tasks.bump-build-version-iot-consumer.results.image-tag)
    - name: subdirectory
      value: ops

  - name: commit-ops
    taskRef:
      name: git-commit
    runAfter:
    - modify-ops-test-iot-consumer
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: subdirectory
      value: ops

  - name: push-ops
    taskRef:
      name: github-push
    runAfter:
    - commit-ops
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    params:
    - name: subdirectory
      value: ops
---
# Source: pipelines/templates/pipelines/build-iot-frontend.yaml
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: build-iot-frontend
spec:
  workspaces:
  - name: gitrepos
  - name: config
  - name: build-artifacts

  tasks:
  - name: git-clone-dev
    taskRef:
      name: git-clone-with-tags
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: url_configmapkey
      value: GIT_DEV_REPO_URL
    - name: revision
      value: main
    - name: subdirectory
      value: dev
    - name: deleteExisting
      value: "true"

  - name: git-clone-ops
    taskRef:
      name: git-clone-with-tags
    runAfter:
    - git-clone-dev
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: url_configmapkey
      value: GIT_OPS_REPO_TEST_URL
    - name: revision
      value: main
    - name: subdirectory
      value: ops
    - name: deleteExisting
      value: "true"

  - name: bump-build-version-iot-frontend
    taskRef:
      name: bumpversion
    runAfter:
    - git-clone-ops
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    params:
    - name: component_name
      value: iot-frontend
    - name: version_file_path
      value: components/iot-frontend/VERSION

  - name: s2i-build-iot-frontend
    taskRef:
      name: s2i
    runAfter:
    - bump-build-version-iot-frontend
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: build-artifacts
      workspace: build-artifacts
    params:
    - name: TLSVERIFY
      value: "false"
    - name: PATH_CONTEXT
      value: components/iot-frontend
    - name: BUILDER_IMAGE
      value: quay.io/wolfgangntnx/ubi8-s2i-web-app
    - name: CHAINED_BUILD_DOCKERFILE
      value: "FROM quay.io/manuela/httpd-ionic\nCOPY --from=0 /opt/app-root/output /var/www/html/"
    - name: TAG
      value: $(tasks.bump-build-version-iot-frontend.results.image-tag)
    - name: OUTPUT_IMAGE
      value: image-registry.openshift-image-registry.svc:5000/manuela-tst-all/line-dashboard

  - name: copy-image-to-remote-registry-iot-frontend
    taskRef:
      name: skopeo-copy
    runAfter:
    - s2i-build-iot-frontend
    workspaces:
    - name: config
      workspace: config
    params:
    - name: TAG
      value: $(tasks.bump-build-version-iot-frontend.results.image-tag)
    - name: SOURCE_IMAGE
      value: image-registry.openshift-image-registry.svc:5000/manuela-tst-all/line-dashboard
    - name: TARGET_IMAGE_CONFIGMAPKEY
      value: IOT_FRONTEND_IMAGE

  - name: push-dev-tag
    taskRef:
      name: github-push
    runAfter:
    - copy-image-to-remote-registry-iot-frontend
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    params:
    - name: PUSH_FLAGS
      value: --tags


  - name: modify-ops-test-iot-frontend
    taskRef:
      name: gitops-imagetag
    runAfter:
    - push-dev-tag
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: CONFIGMAP_PREFIX
      value: IOT_FRONTEND
    - name: ENVIRONMENT
      value: TEST
    - name: TAG
      value: $(tasks.bump-build-version-iot-frontend.results.image-tag)
    - name: subdirectory
      value: ops

  - name: commit-ops
    taskRef:
      name: git-commit
    runAfter:
    - modify-ops-test-iot-frontend
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: subdirectory
      value: ops

  - name: push-ops
    taskRef:
      name: github-push
    runAfter:
    - commit-ops
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    params:
    - name: subdirectory
      value: ops
---
# Source: pipelines/templates/pipelines/build-iot-software-sensor.yaml
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: build-iot-software-sensor
spec:
  workspaces:
  - name: gitrepos
  - name: config
  - name: build-artifacts

  tasks:
  - name: git-clone-dev
    taskRef:
      name: git-clone-with-tags
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: url_configmapkey
      value: GIT_DEV_REPO_URL
    - name: revision
      value: main
    - name: subdirectory
      value: dev
    - name: deleteExisting
      value: "true"

  - name: git-clone-ops
    taskRef:
      name: git-clone-with-tags
    runAfter:
    - git-clone-dev
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: url_configmapkey
      value: GIT_OPS_REPO_TEST_URL
    - name: revision
      value: main
    - name: subdirectory
      value: ops
    - name: deleteExisting
      value: "true"

  - name: bump-build-version-iot-software-sensor
    taskRef:
      name: bumpversion
    runAfter:
    - git-clone-ops
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    params:
    - name: component_name
      value: iot-swsensor
    - name: version_file_path
      value: components/iot-software-sensor/VERSION

  - name: s2i-build-iot-software-sensor
    taskRef:
      name: s2i
    runAfter:
    - bump-build-version-iot-software-sensor
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: build-artifacts
      workspace: build-artifacts
    params:
    - name: TLSVERIFY
      value: "false"
    - name: PATH_CONTEXT
      value: components/iot-software-sensor
    - name: BUILDER_IMAGE
      value: registry.access.redhat.com/redhat-openjdk-18/openjdk18-openshift
    - name: TAG
      value: $(tasks.bump-build-version-iot-software-sensor.results.image-tag)
    - name: OUTPUT_IMAGE
      value: image-registry.openshift-image-registry.svc:5000/manuela-tst-all/machine-sensor

  - name: copy-image-to-remote-registry-iot-software-sensor
    taskRef:
      name: skopeo-copy
    runAfter:
    - s2i-build-iot-software-sensor
    workspaces:
    - name: config
      workspace: config
    params:
    - name: TAG
      value: $(tasks.bump-build-version-iot-software-sensor.results.image-tag)
    - name: SOURCE_IMAGE
      value: image-registry.openshift-image-registry.svc:5000/manuela-tst-all/machine-sensor
    - name: TARGET_IMAGE_CONFIGMAPKEY
      value: IOT_SWSENSOR_IMAGE

  - name: push-dev-tag
    taskRef:
      name: github-push
    runAfter:
    - copy-image-to-remote-registry-iot-software-sensor
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    params:
    - name: PUSH_FLAGS
      value: --tags

  - name: modify-ops-test-iot-software-sensor
    taskRef:
      name: gitops-imagetag
    runAfter:
    - push-dev-tag
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: CONFIGMAP_PREFIX
      value: IOT_SWSENSOR
    - name: ENVIRONMENT
      value: TEST
    - name: TAG
      value: $(tasks.bump-build-version-iot-software-sensor.results.image-tag)
    - name: subdirectory
      value: ops

  - name: commit-ops
    taskRef:
      name: git-commit
    runAfter:
    - modify-ops-test-iot-software-sensor
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: subdirectory
      value: ops

  - name: push-ops
    taskRef:
      name: github-push
    runAfter:
    - commit-ops
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    params:
    - name: subdirectory
      value: ops
---
# Source: pipelines/templates/pipelines/just-pr.yaml
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: just-pr
spec:
  workspaces:
  - name: gitrepos
  - name: config
  - name: argocd-env-secret
  - name: build-artifacts
  params:
  - name: DEV_REVISION
    type: string
    default: main
  - name: OPS_REVISION
    type: string
    default: main
  tasks:
  - name: git-clone-dev
    taskRef:
      name: git-clone-with-tags
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: url_configmapkey
      value: GIT_DEV_REPO_URL
    - name: revision
      value: $(params.DEV_REVISION)
    - name: subdirectory
      value: dev
    - name: deleteExisting
      value: "true"

  - name: git-clone-gitops
    taskRef:
      name: git-clone-with-tags
    runAfter:
    - git-clone-dev
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: url_configmapkey
      value: GIT_OPS_REPO_TEST_URL
    - name: revision
      value: main
    - name: subdirectory
      value: ops
    - name: deleteExisting
      value: "true"

  - name: bump-build-version
    taskRef:
      name: bumpversion
    runAfter:
    - git-clone-gitops
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    params:
    - name: component_name
      value: iot_consumer
    - name: version_file_path
      value: components/iot-consumer/VERSION

  - name: build-messaging-image
    taskRef:
      name: s2i
    runAfter:
    - bump-build-version
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: build-artifacts
      workspace: build-artifacts
    params:
    - name: TLSVERIFY
      value: "false"
    - name: PATH_CONTEXT
      value: components/iot-consumer
    - name: BUILDER_IMAGE
      value: registry.access.redhat.com/rhscl/nodejs-10-rhel7
    - name: TAG
      value: $(tasks.bump-build-version.results.image-tag)
    - name: OUTPUT_IMAGE
      value: image-registry.openshift-image-registry.svc:5000/manuela-tst-all/messaging
    - name: CHAINED_BUILD_DOCKERFILE
      value: ""

  - name: push-dev-tag
    taskRef:
      name: github-push
    runAfter:
    - build-messaging-image
#    - bump-build-version
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    params:
    - name: PUSH_FLAGS
      value: --tags

  - name: modify-ops-test
    taskRef:
      name: gitops-imagetag
    runAfter:
    - push-dev-tag
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: CONFIGMAP_PREFIX
      value: IOT_CONSUMER
    - name: ENVIRONMENT
      value: TEST
    - name: TAG
      value: $(tasks.bump-build-version.results.image-tag)
    - name: subdirectory
      value: ops

  - name: commit-ops-test
    taskRef:
      name: git-commit
    runAfter:
    - modify-ops-test
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: subdirectory
      value: ops

  - name: push-ops-test
    taskRef:
      name: github-push
    runAfter:
    - commit-ops-test
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    params:
    - name: subdirectory
      value: ops

  - name: argocd-sync-application
    taskRef:
      name: argocd-sync-and-wait
    runAfter:
    - push-ops-test
    workspaces:
    - name: argocd-env-secret
      workspace: argocd-env-secret
    params:
    - name: application-name
      #value: manuela-test-mypattern-example
      value: manuela-test
    - name: flags
      value: --insecure
    - name: argocd-version
      value: "v1.5.2"
    - name: revision
      value: $(params.OPS_REVISION)
    - name: argocd-server
      # datacenter-gitops-server.industrial-edge-datacenter.svc
      value: "hub-gitops-server.mypattern-hub.svc"
  # - name: sensor-broker-test
  #   taskRef:
  #     name: mock
  #     kind: Task
  #   runAfter:
  #     - argocd-sync-application
  #   params:
  #     - name: MESSAGE
  #       value: "succesfully sent messages to broker..."
  # - name: consumer-broker-test
  #   taskRef:
  #     name: mock
  #     kind: Task
  #   runAfter:
  #     - argocd-sync-application
  #   params:
  #     - name: MESSAGE
  #       value: "succesfully processed messages from broker..."
  # - name: consumer-frontend-test
  #   taskRef:
  #     name: mock
  #     kind: Task
  #   runAfter:
  #     - argocd-sync-application
  #   params:
  #     - name: MESSAGE
  #       value: "succesfully executed Websocket APIs..."
  # - name: e2e-test
  #   taskRef:
  #     name: mock
  #     kind: Task
  #   runAfter:
  #     - sensor-broker-test
  #     - consumer-broker-test
  #     - consumer-frontend-test
  #   params:
  #     - name: MESSAGE
  #       value: "e2e testsuite succesfully executed"
  - name: test-all
    taskRef:
      name: tkn
    runAfter:
    - argocd-sync-application
    params:
    - name: ARGS
      value:
      - pipeline
      - start
      - test-all
      - --showlog
      - --nocolour

  - name: trigger-staging
    taskRef:
      name: openshift-instantiate-template
    runAfter:
    - test-all
    params:
    - name: TEMPLATE
      value: stage-production-pipelinerun
    - name: PARAMS
      value: -p TAG=$(tasks.bump-build-version.results.image-tag) -p CONFIGMAP_PREFIX=IOT_CONSUMER -p SOURCE_IMAGE=image-registry.openshift-image-registry.svc:5000/manuela-tst-all/messaging -p COMPONENT_NAME=iot-consumer

  - name: cleanup
    taskRef:
      name: cleanup
    runAfter:
    - trigger-staging
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: subdirectory
      value: dev
    - name: COMPONENT_NAME
      value: iot-consumer
    # - name: OPENSHIFT_NAMESPACE
    #   value: manuela-tst-all
    # - name: OPENSHIFT_IMAGESTREAM
    #   value: messaging
---
# Source: pipelines/templates/pipelines/seed-iot-anomaly-detection.yaml
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: seed-iot-anomaly-detection
spec:
  workspaces:
  - name: gitrepos
  - name: config
  - name: build-artifacts

  tasks:
  - name: git-clone-dev
    taskRef:
      name: git-clone-with-tags
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: url_configmapkey
      value: GIT_DEV_REPO_URL
    - name: revision
      value: main
    - name: subdirectory
      value: dev
    - name: deleteExisting
      value: "true"

  - name: git-clone-ops
    taskRef:
      name: git-clone-with-tags
    runAfter:
    - git-clone-dev
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: url_configmapkey
      value: GIT_OPS_REPO_TEST_URL
    - name: revision
      value: main
    - name: subdirectory
      value: ops
    - name: deleteExisting
      value: "true"

  - name: bump-build-version-iot-anomaly
    taskRef:
      name: bumpversion
    runAfter:
    - git-clone-ops
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    params:
    - name: component_name
      value: iot-anomaly
    - name: version_file_path
      value: components/iot-anomaly-detection/VERSION

  - name: s2i-build-iot-anomaly
    taskRef:
      name: s2i
    runAfter:
    - bump-build-version-iot-anomaly
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: build-artifacts
      workspace: build-artifacts
    params:
    - name: TLSVERIFY
      value: "false"
    - name: PATH_CONTEXT
      value: components/iot-anomaly-detection
    - name: BUILDER_IMAGE
      value: registry.access.redhat.com/rhscl/python-36-rhel7
    - name: TAG
      value: $(tasks.bump-build-version-iot-anomaly.results.image-tag)
    - name: OUTPUT_IMAGE
      value: image-registry.openshift-image-registry.svc:5000/manuela-tst-all/anomaly-detection

  - name: copy-image-to-remote-registry-iot-anomaly
    taskRef:
      name: skopeo-copy
    runAfter:
    - s2i-build-iot-anomaly
    workspaces:
    - name: config
      workspace: config
    params:
    - name: TAG
      value: $(tasks.bump-build-version-iot-anomaly.results.image-tag)
    - name: SOURCE_IMAGE
      value: image-registry.openshift-image-registry.svc:5000/manuela-tst-all/anomaly-detection
    - name: TARGET_IMAGE_CONFIGMAPKEY
      value: IOT_ANOMALY_IMAGE

  - name: push-dev-tag
    taskRef:
      name: github-push
    runAfter:
    - copy-image-to-remote-registry-iot-anomaly
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    params:
    - name: PUSH_FLAGS
      value: --tags

  - name: modify-ops-test-iot-anomaly
    taskRef:
      name: gitops-imagetag
    runAfter:
    - push-dev-tag
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: CONFIGMAP_PREFIX
      value: IOT_ANOMALY
    - name: ENVIRONMENT
      value: TEST
    - name: TAG
      value: $(tasks.bump-build-version-iot-anomaly.results.image-tag)
    - name: subdirectory
      value: ops

  - name: modify-ops-prod-iot-anomaly
    taskRef:
      name: gitops-imagetag
    runAfter:
    - modify-ops-test-iot-anomaly
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: CONFIGMAP_PREFIX
      value: IOT_ANOMALY
    - name: ENVIRONMENT
      value: PROD
    - name: TAG
      value: $(tasks.bump-build-version-iot-anomaly.results.image-tag)
    - name: subdirectory
      value: ops

  - name: commit-ops
    taskRef:
      name: git-commit
    runAfter:
    - modify-ops-prod-iot-anomaly
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: subdirectory
      value: ops

  - name: push-ops
    taskRef:
      name: github-push
    runAfter:
    - commit-ops
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    params:
    - name: subdirectory
      value: ops
---
# Source: pipelines/templates/pipelines/seed-iot-consumer.yaml
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: seed-iot-consumer
spec:
  workspaces:
  - name: gitrepos
  - name: config
  - name: build-artifacts

  tasks:
  - name: git-clone-dev
    taskRef:
      name: git-clone-with-tags
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: url_configmapkey
      value: GIT_DEV_REPO_URL
    - name: revision
      value: main
    - name: subdirectory
      value: dev
    - name: deleteExisting
      value: "true"

  - name: git-clone-ops
    taskRef:
      name: git-clone-with-tags
    runAfter:
    - git-clone-dev
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: url_configmapkey
      value: GIT_OPS_REPO_TEST_URL
    - name: revision
      value: main
    - name: subdirectory
      value: ops
    - name: deleteExisting
      value: "true"

  - name: bump-build-version-iot-consumer
    taskRef:
      name: bumpversion
    runAfter:
    - git-clone-ops
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    params:
    - name: component_name
      value: iot-consumer
    - name: version_file_path
      value: components/iot-consumer/VERSION

  - name: s2i-build-iot-consumer
    taskRef:
      name: s2i
    runAfter:
    - bump-build-version-iot-consumer
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: build-artifacts
      workspace: build-artifacts
    params:
    - name: TLSVERIFY
      value: "false"
    - name: PATH_CONTEXT
      value: components/iot-consumer
    - name: BUILDER_IMAGE
      value: registry.access.redhat.com/rhscl/nodejs-10-rhel7
    - name: TAG
      value: $(tasks.bump-build-version-iot-consumer.results.image-tag)
    - name: OUTPUT_IMAGE
      value: image-registry.openshift-image-registry.svc:5000/manuela-tst-all/messaging

  - name: copy-image-to-remote-registry-iot-consumer
    taskRef:
      name: skopeo-copy
    runAfter:
    - s2i-build-iot-consumer
    workspaces:
    - name: config
      workspace: config
    params:
    - name: TAG
      value: $(tasks.bump-build-version-iot-consumer.results.image-tag)
    - name: SOURCE_IMAGE
      value: image-registry.openshift-image-registry.svc:5000/manuela-tst-all/messaging
    - name: TARGET_IMAGE_CONFIGMAPKEY
      value: IOT_CONSUMER_IMAGE

  - name: push-dev-tag
    taskRef:
      name: github-push
    runAfter:
    - copy-image-to-remote-registry-iot-consumer
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    params:
    - name: PUSH_FLAGS
      value: --tags


  - name: modify-ops-test-iot-consumer
    taskRef:
      name: gitops-imagetag
    runAfter:
    - push-dev-tag
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: CONFIGMAP_PREFIX
      value: IOT_CONSUMER
    - name: ENVIRONMENT
      value: TEST
    - name: TAG
      value: $(tasks.bump-build-version-iot-consumer.results.image-tag)
    - name: subdirectory
      value: ops

  - name: modify-ops-prod-iot-consumer
    taskRef:
      name: gitops-imagetag
    runAfter:
    - modify-ops-test-iot-consumer
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: CONFIGMAP_PREFIX
      value: IOT_CONSUMER
    - name: ENVIRONMENT
      value: PROD
    - name: TAG
      value: $(tasks.bump-build-version-iot-consumer.results.image-tag)
    - name: subdirectory
      value: ops

  - name: commit-ops
    taskRef:
      name: git-commit
    runAfter:
    - modify-ops-prod-iot-consumer
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: subdirectory
      value: ops

  - name: push-ops
    taskRef:
      name: github-push
    runAfter:
    - commit-ops
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    params:
    - name: subdirectory
      value: ops
---
# Source: pipelines/templates/pipelines/seed-iot-frontend.yaml
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: seed-iot-frontend
spec:
  workspaces:
  - name: gitrepos
  - name: config
  - name: build-artifacts

  tasks:
  - name: git-clone-dev
    taskRef:
      name: git-clone-with-tags
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: url_configmapkey
      value: GIT_DEV_REPO_URL
    - name: revision
      value: main
    - name: subdirectory
      value: dev
    - name: deleteExisting
      value: "true"

  - name: git-clone-ops
    taskRef:
      name: git-clone-with-tags
    runAfter:
    - git-clone-dev
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: url_configmapkey
      value: GIT_OPS_REPO_TEST_URL
    - name: revision
      value: main
    - name: subdirectory
      value: ops
    - name: deleteExisting
      value: "true"

  - name: bump-build-version-iot-frontend
    taskRef:
      name: bumpversion
    runAfter:
    - git-clone-ops
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    params:
    - name: component_name
      value: iot-frontend
    - name: version_file_path
      value: components/iot-frontend/VERSION

  - name: s2i-build-iot-frontend
    taskRef:
      name: s2i
    runAfter:
    - bump-build-version-iot-frontend
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: build-artifacts
      workspace: build-artifacts
    params:
    - name: TLSVERIFY
      value: "false"
    - name: PATH_CONTEXT
      value: components/iot-frontend
    - name: BUILDER_IMAGE
      value: quay.io/wolfgangntnx/ubi8-s2i-web-app
    - name: CHAINED_BUILD_DOCKERFILE
      value: "FROM quay.io/manuela/httpd-ionic\nCOPY --from=0 /opt/app-root/output /var/www/html/"
    - name: TAG
      value: $(tasks.bump-build-version-iot-frontend.results.image-tag)
    - name: OUTPUT_IMAGE
      value: image-registry.openshift-image-registry.svc:5000/manuela-tst-all/line-dashboard

  - name: copy-image-to-remote-registry-iot-frontend
    taskRef:
      name: skopeo-copy
    runAfter:
    - s2i-build-iot-frontend
    workspaces:
    - name: config
      workspace: config
    params:
    - name: TAG
      value: $(tasks.bump-build-version-iot-frontend.results.image-tag)
    - name: SOURCE_IMAGE
      value: image-registry.openshift-image-registry.svc:5000/manuela-tst-all/line-dashboard
    - name: TARGET_IMAGE_CONFIGMAPKEY
      value: IOT_FRONTEND_IMAGE

  - name: push-dev-tag
    taskRef:
      name: github-push
    runAfter:
    - copy-image-to-remote-registry-iot-frontend
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    params:
    - name: PUSH_FLAGS
      value: --tags


  - name: modify-ops-test-iot-frontend
    taskRef:
      name: gitops-imagetag
    runAfter:
    - push-dev-tag
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: CONFIGMAP_PREFIX
      value: IOT_FRONTEND
    - name: ENVIRONMENT
      value: TEST
    - name: TAG
      value: $(tasks.bump-build-version-iot-frontend.results.image-tag)
    - name: subdirectory
      value: ops

  - name: modify-ops-prod-iot-frontend
    taskRef:
      name: gitops-imagetag
    runAfter:
    - modify-ops-test-iot-frontend
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: CONFIGMAP_PREFIX
      value: IOT_FRONTEND
    - name: ENVIRONMENT
      value: PROD
    - name: TAG
      value: $(tasks.bump-build-version-iot-frontend.results.image-tag)
    - name: subdirectory
      value: ops

  - name: commit-ops
    taskRef:
      name: git-commit
    runAfter:
    - modify-ops-prod-iot-frontend
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: subdirectory
      value: ops

  - name: push-ops
    taskRef:
      name: github-push
    runAfter:
    - commit-ops
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    params:
    - name: subdirectory
      value: ops
---
# Source: pipelines/templates/pipelines/seed-iot-software-sensor.yaml
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: seed-iot-software-sensor
spec:
  workspaces:
  - name: gitrepos
  - name: config
  - name: build-artifacts

  tasks:
  - name: git-clone-dev
    taskRef:
      name: git-clone-with-tags
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: url_configmapkey
      value: GIT_DEV_REPO_URL
    - name: revision
      value: main
    - name: subdirectory
      value: dev
    - name: deleteExisting
      value: "true"

  - name: git-clone-ops
    taskRef:
      name: git-clone-with-tags
    runAfter:
    - git-clone-dev
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: url_configmapkey
      value: GIT_OPS_REPO_TEST_URL
    - name: revision
      value: main
    - name: subdirectory
      value: ops
    - name: deleteExisting
      value: "true"

  - name: bump-build-version-iot-software-sensor
    taskRef:
      name: bumpversion
    runAfter:
    - git-clone-ops
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    params:
    - name: component_name
      value: iot-swsensor
    - name: version_file_path
      value: components/iot-software-sensor/VERSION

  - name: s2i-build-iot-software-sensor
    taskRef:
      name: s2i
    runAfter:
    - bump-build-version-iot-software-sensor
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: build-artifacts
      workspace: build-artifacts
    params:
    - name: TLSVERIFY
      value: "false"
    - name: PATH_CONTEXT
      value: components/iot-software-sensor
    - name: BUILDER_IMAGE
      value: registry.access.redhat.com/redhat-openjdk-18/openjdk18-openshift
    - name: TAG
      value: $(tasks.bump-build-version-iot-software-sensor.results.image-tag)
    - name: OUTPUT_IMAGE
      value: image-registry.openshift-image-registry.svc:5000/manuela-tst-all/machine-sensor

  - name: copy-image-to-remote-registry-iot-software-sensor
    taskRef:
      name: skopeo-copy
    runAfter:
    - s2i-build-iot-software-sensor
    workspaces:
    - name: config
      workspace: config
    params:
    - name: TAG
      value: $(tasks.bump-build-version-iot-software-sensor.results.image-tag)
    - name: SOURCE_IMAGE
      value: image-registry.openshift-image-registry.svc:5000/manuela-tst-all/machine-sensor
    - name: TARGET_IMAGE_CONFIGMAPKEY
      value: IOT_SWSENSOR_IMAGE

  - name: push-dev-tag
    taskRef:
      name: github-push
    runAfter:
    - copy-image-to-remote-registry-iot-software-sensor
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    params:
    - name: PUSH_FLAGS
      value: --tags

  - name: modify-ops-test-iot-software-sensor
    taskRef:
      name: gitops-imagetag
    runAfter:
    - push-dev-tag
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: CONFIGMAP_PREFIX
      value: IOT_SWSENSOR
    - name: ENVIRONMENT
      value: TEST
    - name: TAG
      value: $(tasks.bump-build-version-iot-software-sensor.results.image-tag)
    - name: subdirectory
      value: ops

  - name: modify-ops-prod-iot-software-sensor
    taskRef:
      name: gitops-imagetag
    runAfter:
    - modify-ops-test-iot-software-sensor
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: CONFIGMAP_PREFIX
      value: IOT_SWSENSOR
    - name: ENVIRONMENT
      value: PROD
    - name: TAG
      value: $(tasks.bump-build-version-iot-software-sensor.results.image-tag)
    - name: subdirectory
      value: ops

  - name: commit-ops
    taskRef:
      name: git-commit
    runAfter:
    - modify-ops-prod-iot-software-sensor
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: subdirectory
      value: ops

  - name: push-ops
    taskRef:
      name: github-push
    runAfter:
    - commit-ops
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    params:
    - name: subdirectory
      value: ops
---
# Source: pipelines/templates/pipelines/seed.yaml
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: seed
spec:
  workspaces:
  - name: gitrepos
  - name: config
  - name: build-artifacts
  params:
  - name: DEV_REVISION
    type: string
    default: main
  - name: OPS_REVISION
    type: string
    default: main
  tasks:
  - name: build-base-images
    taskRef:
      name: tkn
      kind: Task
    params:
    - name: ARGS
      value:
      - pipeline
      - start
      - build-base-images
      - --param
      - PATH_CONTEXT=tekton/images/httpd-ionic
      - --param
      - OUTPUT_IMAGE_PROVIDER_CONFIGMAPKEY=IMAGE_PROVIDER
      - --param
      - OUTPUT_IMAGE_ACCOUNT_CONFIGMAPKEY=IMAGE_ACCOUNT
      - --param
      - OUTPUT_IMAGE_NAME=http-ionic
      - --param
      - DEV_REVISION=$(params.DEV_REVISION)
      - --workspace
      - name=gitrepos,claimName=gitrepos-rwo
      - --workspace
      - name=config,config=environment
      - --workspace
      - name=build-artifacts,claimName=build-artifacts-rwo
      - --showlog
      - --nocolour

  - name: seed-iot-anomaly-detection
    runAfter:
      - build-base-images
    taskRef:
      name: tkn
      kind: Task
    params:
    - name: ARGS
      value:
      - pipeline
      - start
      - seed-iot-anomaly-detection
      - --workspace
      - name=gitrepos,claimName=gitrepos-rwo
      - --workspace
      - name=config,config=environment
      - --workspace
      - name=build-artifacts,claimName=build-artifacts-rwo
      - --showlog
      - --nocolour

  - name: seed-iot-consumer
    runAfter:
      - seed-iot-anomaly-detection
    taskRef:
      name: tkn
      kind: Task
    params:
    - name: ARGS
      value:
      - pipeline
      - start
      - seed-iot-consumer
      - --workspace
      - name=gitrepos,claimName=gitrepos-rwo
      - --workspace
      - name=config,config=environment
      - --workspace
      - name=build-artifacts,claimName=build-artifacts-rwo
      - --showlog
      - --nocolour

  - name: seed-iot-frontend
    runAfter:
      - seed-iot-consumer
    taskRef:
      name: tkn
      kind: Task
    params:
    - name: ARGS
      value:
      - pipeline
      - start
      - seed-iot-frontend
      - --workspace
      - name=gitrepos,claimName=gitrepos-rwo
      - --workspace
      - name=config,config=environment
      - --workspace
      - name=build-artifacts,claimName=build-artifacts-rwo
      - --showlog
      - --nocolour

  - name: seed-iot-software-sensor
    runAfter:
      - seed-iot-frontend
    taskRef:
      name: tkn
      kind: Task
    params:
    - name: ARGS
      value:
      - pipeline
      - start
      - seed-iot-software-sensor
      - --workspace
      - name=gitrepos,claimName=gitrepos-rwo
      - --workspace
      - name=config,config=environment
      - --workspace
      - name=build-artifacts,claimName=build-artifacts-rwo
      - --showlog
      - --nocolour
---
# Source: pipelines/templates/pipelines/stage-production.yaml
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: stage-production
spec:
  workspaces:
  - name: gitrepos
  - name: config
  - name: github-secret
  params:
  - name: TAG
    type: string
  - name: SOURCE_IMAGE
    type: string
  - name: CONFIGMAP_PREFIX
    type: string

  tasks:
  - name: git-clone-ops
    taskRef:
      name: git-clone-with-tags
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: url_configmapkey
      value: GIT_OPS_REPO_PROD_URL
    - name: revision
      value: main
    - name: subdirectory
      value: ops
    - name: deleteExisting
      value: "true"

  - name: copy-image-to-remote-registry
    taskRef:
      name: skopeo-copy
    runAfter:
    - git-clone-ops
    workspaces:
    - name: config
      workspace: config
    params:
    - name: TAG
      value: $(params.TAG)
    - name: SOURCE_IMAGE
      value: $(params.SOURCE_IMAGE)
    - name: TARGET_IMAGE_CONFIGMAPKEY
      value: $(params.CONFIGMAP_PREFIX)_IMAGE

  - name: checkout-staging-branch
    taskRef:
      name: git-checkout
    runAfter:
    - copy-image-to-remote-registry
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    params:
    - name: subdirectory
      value: ops
    - name: BRANCH
      value: staging-approval

  - name: modify-ops-prod
    taskRef:
      name: gitops-imagetag
    runAfter:
    - checkout-staging-branch
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: CONFIGMAP_PREFIX
      value: $(params.CONFIGMAP_PREFIX)
    - name: ENVIRONMENT
      value: PROD
    - name: TAG
      value: $(params.TAG)
    - name: subdirectory
      value: ops

  - name: commit-ops-prod
    taskRef:
      name: git-commit
    runAfter:
    - modify-ops-prod
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    - name: config
      workspace: config
    params:
    - name: subdirectory
      value: ops

  - name: push-ops-prod
    taskRef:
      name: github-push
    runAfter:
    - commit-ops-prod
    workspaces:
    - name: gitrepos
      workspace: gitrepos
    params:
    - name: subdirectory
      value: ops
    - name: PUSH_FLAGS
      value: --set-upstream origin staging-approval

  - name: github-pull-request
    taskRef:
      name: github-add-pull-request
    runAfter:
    - push-ops-prod
    workspaces:
    - name: config
      workspace: config
    - name: github-secret
      workspace: github-secret
    params:
    - name: GITHUB_REPO_CONFIGMAPKEY
      value: GIT_OPS_REPO_PROD_URL
    - name: GIT_BRANCH_HEAD
      value: staging-approval
    - name: GIT_BRANCH_BASE
      value: main
---
# Source: pipelines/templates/pipelines/test-all.yaml
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: test-all
spec:
  tasks:
  - name: sensor-broker-test
    taskRef:
      name: mock
      kind: Task
    params:
      - name: MESSAGE
        value: "succesfully sent messages to broker..."
  - name: consumer-broker-test
    taskRef:
      name: mock
      kind: Task
    params:
      - name: MESSAGE
        value: "succesfully processed messages from broker..."
  - name: consumer-frontend-test
    taskRef:
      name: mock
      kind: Task
    params:
      - name: MESSAGE
        value: "succesfully executed Websocket APIs..."
  - name: e2e-test
    taskRef:
      name: mock
      kind: Task
    runAfter:
      - sensor-broker-test
      - consumer-broker-test
      - consumer-frontend-test
    params:
      - name: MESSAGE
        value: "e2e testsuite succesfully executed"
  # - name: fail
  #   taskRef:
  #     name: fail
  #     kind: Task
  #   runAfter:
  #   - e2e-test
---
# Source: pipelines/templates/tasks/argocd-sync-and-wait.yaml
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: argocd-sync-and-wait
spec:
  workspaces:
  - name: argocd-env-secret
  params:
  - name: application-name
    type: string
    description: name of the application to sync
  - name: revision
    type: string
    description: the revision to sync to
    default: main
  - name: flags
    type: string
    default: --
  - name: argocd-version
    type: string
    default: v1.5.2
  - name: argocd-server
    type: string
    default: openshift-gitops-server.openshift-gitops.svc
  steps:
    - name: login-sync-wait
      image: argoproj/argocd:$(params.argocd-version)
      command: ["/bin/bash", "-c"]
      args:
        - if [ -z $ARGOCD_AUTH_TOKEN ]; then
            yes | argocd login $(params.argocd-server) --grpc-web $(params.flags) --username=$(cat $(workspaces.argocd-env-secret.path)/ARGOCD_USERNAME) --password=$(cat $(workspaces.argocd-env-secret.path)/ARGOCD_PASSWORD);
          fi;
        - argocd app sync $(params.application-name) --revision $(params.revision) $(params.flags);
        - argocd app wait $(params.application-name) --health $(params.flags);
---
# Source: pipelines/templates/tasks/buildah.yaml
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: buildah
spec:
  workspaces:
  - name: gitrepos
    description: The git repo will be cloned onto the volume backing this workspace
  - name: config
  results:
  - name: image
    description: The image+tag that was created
  params:
  - name: PATH_CONTEXT
    default: .
    description: The location of the path to run s2i from.
    type: string
  - name: TLSVERIFY
    default: "true"
    description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
    type: string
  - name: subdirectory
    default: "dev"
    description: subdirectory in the gitrepos workspace where the dev repo has been cloned to
    type: string
  - name: OUTPUT_IMAGE_PROVIDER_CONFIGMAPKEY
    type: string
  - name: OUTPUT_IMAGE_ACCOUNT_CONFIGMAPKEY
    type: string
  - name: OUTPUT_IMAGE_NAME
    type: string
  - name: TAG
    default: latest
    type: string
  - name: DOCKERFILE
    default: Dockerfile
    type: string
  steps:
  - name: build
    image: quay.io/buildah/stable:v1.11.0
    script: |
      PROVIDER=$(cat $(workspaces.config.path)/$(params.OUTPUT_IMAGE_PROVIDER_CONFIGMAPKEY))
      ACCOUNT=$(cat $(workspaces.config.path)/$(params.OUTPUT_IMAGE_ACCOUNT_CONFIGMAPKEY))
      OUTPUT_IMAGE="$PROVIDER/$ACCOUNT/$(params.OUTPUT_IMAGE_NAME)"
      buildah bud --tls-verify=$(params.TLSVERIFY) --storage-driver=vfs -f $(params.DOCKERFILE) -t $OUTPUT_IMAGE
    resources: {}
    securityContext:
      privileged: false
      capabilities:
        add: ["SETFCAP"]
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
    workingDir: $(workspaces.gitrepos.path)/$(params.subdirectory)/$(params.PATH_CONTEXT)
  - name: push
    image: quay.io/buildah/stable:v1.11.0
    script: |
      PROVIDER=$(cat $(workspaces.config.path)/$(params.OUTPUT_IMAGE_PROVIDER_CONFIGMAPKEY))
      ACCOUNT=$(cat $(workspaces.config.path)/$(params.OUTPUT_IMAGE_ACCOUNT_CONFIGMAPKEY))
      OUTPUT_IMAGE="$PROVIDER/$ACCOUNT/$(params.OUTPUT_IMAGE_NAME)"
      buildah push --storage-driver=vfs --tls-verify=$(params.TLSVERIFY) $OUTPUT_IMAGE docker://$OUTPUT_IMAGE:$(params.TAG)
      echo -n "$OUTPUT_IMAGE:$(params.TAG)" >$(results.image.path)
    resources: {}
    securityContext:
      privileged: false
      capabilities:
        add: ["SETFCAP"]
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
  volumes:
  - emptyDir: {}
    name: varlibcontainers
---
# Source: pipelines/templates/tasks/bumpversion.yaml
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: bumpversion
spec:
  workspaces:
    - name: gitrepos
      description: The git repo will be cloned onto the volume backing this workspace
  params:
  - name: subdirectory
    description: subdirectory inside the "gitrepos" workspace to clone the git repo into
    type: string
    default: "dev"
  - name: component_name
    description: component name
    type: string
  - name: version_file_path
    description: path within subdirectory where the base VERSION of the component resides
    type: string
  results:
  - name: image-tag
    description: the new build version based on the last tags and VERSION file
  - name: git-tag
    description: the new build version based on the last tags and VERSION file
  steps:
  - name: current-tag
    image: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.24.3
    script: |
      VERSION_GLOB="build-$(params.component_name)-$(cat $(params.version_file_path))-*"

      # existing tag based on glob
      LAST_TAG=$(git tag --sort "version:refname" -l $VERSION_GLOB | tail -n 1)
      EXIT_CODE="$?"
      if [ "$EXIT_CODE" != 0 ] ; then
        exit $EXIT_CODE
      fi

      # if tag doesn't exist, create new one
      if [ "$LAST_TAG" == "" ] ; then
        LAST_TAG="build-$(params.component_name)-$(cat $(params.version_file_path))-0"
      fi

      # Make sure we don't add a trailing newline to the result!
      echo -n "$LAST_TAG" >/scratch/VERSION
    volumeMounts:
    - mountPath: /scratch
      name: scratch
    workingDir: $(workspaces.gitrepos.path)/$(params.subdirectory)
  - name: bump-tag
    image: quay.io/manuela/bumpversiontask:latest
    script: |
      cd /scratch
      echo -e "[bumpversion]\ncurrent_version = $(cat VERSION)" >.bumpversion.cfg
      cat <<EOF >>.bumpversion.cfg
      commit = False
      tag = False
      parse = (?P<prefix>.*)\-(?P<major>\d+)\.(?P<minor>\d+)\.(?P<patch>\d+)\-(?P<build>\d+)
      serialize = {prefix}-{major}.{minor}.{patch}-{build:03d}

      [bumpversion:part:build]

      [bumpversion:file:VERSION]
      EOF

      bump2version build /scratch/VERSION

      sed "s/build-$(params.component_name)-//" /scratch/VERSION >$(results.image-tag.path)
    volumeMounts:
    - mountPath: /scratch
      name: scratch
    workingDir: $(workspaces.gitrepos.path)/$(params.subdirectory)
  - name: tag-repo
    image: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.24.3
    script: |
      VERSION=$(cat /scratch/VERSION)
      git tag $VERSION
      EXIT_CODE="$?"
      if [ "$EXIT_CODE" != 0 ] ; then
        exit $EXIT_CODE
      fi
      echo -n "$VERSION" > $(results.git-tag.path)
    volumeMounts:
    - mountPath: /scratch
      name: scratch
    workingDir: $(workspaces.gitrepos.path)/$(params.subdirectory)
  volumes:
  - emptyDir: {}
    name: scratch
---
# Source: pipelines/templates/tasks/cleanup.yaml
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: cleanup
spec:
  workspaces:
  - name: gitrepos
    description: The git repo will be cloned onto the volume backing this workspace
  - name: config
    description: configmap contents
  params:
  - name: subdirectory
    description: subdirectory inside the "gitrepos" workspace to clone the git repo into
    type: string
    default: dev
  - name: COMPONENT_NAME
    description: component name
    type: string
  - name: NUMBER_OF_TAGS_TO_KEEP
    type: string
    default: "5"
  - name: GITHUB_USERNAME_CONFIGMAPKEY
    default: user
    type: string
  - name: GITHUB_TOKEN_CONFIGMAPKEY
    default: token
    type: string
  # - name: OPENSHIFT_NAMESPACE
  #   default: manuela-tst-all
  #   type: string
  # - name: OPENSHIFT_IMAGESTREAM
  #   default: messaging
  #   type: string
  steps:
  - name: cleanup-git-tags
    image: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.24.3
    script: |
      #list build tags for component in repo
      BUILD_TAG_GLOB="build-$(params.COMPONENT_NAME)-*"
      git tag --sort "version:refname" -l $BUILD_TAG_GLOB >/scratch/tags

      #identify build tags to keep
      tail -n $(params.NUMBER_OF_TAGS_TO_KEEP) /scratch/tags >/scratch/keep

      #identify build tags to be deleted
      diff /scratch/tags /scratch/keep | grep \^-build | cut -c2- > /scratch/delete

      #delete build tags
      for TAG in $(cat /scratch/delete); do
        git push origin :$TAG
        EXIT_CODE="$?"
        if [ "$EXIT_CODE" != 0 ]
        then
          exit $EXIT_CODE
        fi
      done
    volumeMounts:
    - mountPath: /scratch
      name: scratch
    workingDir: $(workspaces.gitrepos.path)/$(params.subdirectory)
  # - name: cleanup-test-images
  #   image: quay.io/openshift/origin-cli:latest
  #   script: |
  #     oc get is -n $(params.OPENSHIFT_NAMESPACE) $(params.OPENSHIFT_IMAGESTREAM) -o jsonpath='{.status.tags..tag}' | tr " " "\n" | grep build- | comm -23 - /scratch/keep >/scratch/delete_istags
  #     EXIT_CODE="$?"
  #     if [ "$EXIT_CODE" != 0 ]
  #     then
  #       exit $EXIT_CODE
  #     fi
  #     for TAG in $(cat /scratch/delete_istags); do
  #       oc tag -n $(params.OPENSHIFT_NAMESPACE) -d $(params.OPENSHIFT_IMAGESTREAM):$TAG
  #       EXIT_CODE="$?"
  #       if [ "$EXIT_CODE" != 0 ]
  #       then
  #         exit $EXIT_CODE
  #       fi
  #     done
  #   volumeMounts:
  #   - mountPath: /scratch
  #     name: scratch
  #   workingDir: $(workspaces.gitrepos.path)/$(params.subdirectory)
  volumes:
  - emptyDir: {}
    name: scratch
---
# Source: pipelines/templates/tasks/fail.yaml
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: fail
spec:
  steps:
  - name: fail
    image: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.24.3
    script: |
      exit 1
---
# Source: pipelines/templates/tasks/git-checkout.yaml
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: git-checkout
spec:
  workspaces:
  - name: gitrepos
    description: The git repo will be cloned onto the volume backing this workspace
  params:
  - name: BRANCH
    description: branch to check out or to create
    type: string
    default: main
  - name: subdirectory
    description: subdirectory inside the "gitrepos" workspace to clone the git repo into
    type: string
  results:
  - name: commit
    description: The precise commit SHA that is HEAD of the checked out branch
  steps:
  - name: checkout
    image: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.24.3
    script: |
      BRANCH=$(params.BRANCH)
      git checkout -q --track -b $BRANCH origin/$BRANCH 2>&1 || git checkout -q -b $BRANCH 2>&1

      EXIT_CODE="$?"
      if [ "$EXIT_CODE" != 0 ]
      then
        exit $EXIT_CODE
      fi

      RESULT_SHA="$(git rev-parse HEAD | tr -d '\n')"
      EXIT_CODE="$?"
      if [ "$EXIT_CODE" != 0 ]
      then
        exit $EXIT_CODE
      fi
      # Make sure we don't add a trailing newline to the result!
      echo -n "$RESULT_SHA" > $(results.commit.path)
    workingDir: $(workspaces.gitrepos.path)/$(params.subdirectory)
---
# Source: pipelines/templates/tasks/git-clone-with-tags.yaml
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: git-clone-with-tags
spec:
  workspaces:
  - name: gitrepos
    description: The git repo will be cloned onto the volume backing this workspace
  - name: config
    description: configmap contents
  params:
  - name: url_configmapkey
    description: git url to clone
    type: string
  - name: revision
    description: git revision to checkout (branch, tag, sha, ref…)
    type: string
    default: main
  - name: submodules
    description: defines if the resource should initialize and fetch the submodules
    type: string
    default: "true"
  - name: depth
    description: performs a shallow clone where only the most recent commit(s) will be fetched
    type: string
    default: "1"
  - name: sslVerify
    description: defines if http.sslVerify should be set to true or false in the global git config
    type: string
    default: "true"
  - name: subdirectory
    description: subdirectory inside the "gitrepos" workspace to clone the git repo into
    type: string
    default: ""
  - name: deleteExisting
    description: clean out the contents of the repo's destination directory (if it already exists) before trying to clone the repo there
    type: string
    default: "false"
  results:
  - name: commit
    description: The precise commit SHA that was fetched by this Task
  steps:
  - name: clone
    image: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.24.3
    script: |
      CHECKOUT_DIR="$(workspaces.gitrepos.path)/$(params.subdirectory)"

      cleandir() {
        # Delete any existing contents of the repo directory if it exists.
        #
        # We don't just "rm -rf $CHECKOUT_DIR" because $CHECKOUT_DIR might be "/"
        # or the root of a mounted volume.
        if [[ -d "$CHECKOUT_DIR" ]] ; then
          # Delete non-hidden files and directories
          rm -rf "$CHECKOUT_DIR"/*
          # Delete files and directories starting with . but excluding ..
          rm -rf "$CHECKOUT_DIR"/.[!.]*
          # Delete files and directories starting with .. plus any other character
          rm -rf "$CHECKOUT_DIR"/..?*
        fi
      }

      if [[ "$(params.deleteExisting)" == "true" ]] ; then
        cleandir
      fi

      /ko-app/git-init \
        -url "$(cat $(workspaces.config.path)/$(params.url_configmapkey))" \
        -revision "$(params.revision)" \
        -path "$CHECKOUT_DIR" \
        -sslVerify="$(params.sslVerify)" \
        -submodules="$(params.submodules)" \
        -depth="$(params.depth)"
      cd "$CHECKOUT_DIR"

      git fetch --tags
      EXIT_CODE="$?"
      if [ "$EXIT_CODE" != 0 ]
      then
       exit $EXIT_CODE
      fi

      # Seems the go git client checks out master regardless.  This allows for 'main' or another branch to be used
      git checkout $(params.revision)
      git branch --set-upstream-to=origin/$(params.revision)

      EXIT_CODE="$?"
      if [ "$EXIT_CODE" != 0 ]
      then
        exit $EXIT_CODE
      fi

      RESULT_SHA="$(git rev-parse HEAD | tr -d '\n')"
      EXIT_CODE="$?"
      if [ "$EXIT_CODE" != 0 ]
      then
        exit $EXIT_CODE
      fi
      # Make sure we don't add a trailing newline to the result!
      echo -n "$RESULT_SHA" > $(results.commit.path)
---
# Source: pipelines/templates/tasks/git-commit.yaml
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: git-commit
spec:
  workspaces:
  - name: gitrepos
    description: The git repo will be cloned onto the volume backing this workspace
  - name: config
    description: configmap contents
  params:
  - name: GIT_EMAIL_CONFIGMAPKEY
    default: GIT_EMAIL
    type: string
  - name: MESSAGE
    description: commit message
    type: string
    default: "change made by Tekton task"
  - name: subdirectory
    description: subdirectory inside the "gitrepos" workspace to clone the git repo into
    type: string
  steps:
  - name: commit
    image: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.24.3
    script: |
      git diff
      git config --global user.email "$(cat $(workspaces.config.path)/$(params.GIT_EMAIL_CONFIGMAPKEY))"
      git config --global user.name "Tekton Automation"
      git add .
      EXIT_CODE="$?"
      if [ "$EXIT_CODE" != 0 ]
      then
        exit $EXIT_CODE
      fi

      #only commit if there is something which has changed
      git diff --staged --quiet || git commit -m "$(params.MESSAGE)"

      EXIT_CODE="$?"
      if [ "$EXIT_CODE" != 0 ]
      then
        exit $EXIT_CODE
      fi
    workingDir: $(workspaces.gitrepos.path)/$(params.subdirectory)
---
# Source: pipelines/templates/tasks/github-add-pull-request.yaml
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: github-add-pull-request
spec:
  workspaces:
  - name: config
  - name: github-secret
  params:
  - name: PULL_REQUEST_BODY
    description: The body to be used for the pull request
    type: string
    default: ""
  - name: PULL_REQUEST_TITLE
    description: Title of the pull request
    type: string
    default: "Pull request created by Tekton task github-add-pull-request"
  - name: GITHUB_REPO_CONFIGMAPKEY
    description: The github owner/repo to use
    type: string
  - name: GIT_BRANCH_HEAD
    description: The branch to pull from
    type: string
    default: approve
  - name: GIT_BRANCH_BASE
    description: The branch to pull into
    type: string
    default: main
  steps:
  - name: create-pull-request
    image: curlimages/curl
    script: |
      GITREPO=$(cat $(workspaces.config.path)/$(params.GITHUB_REPO_CONFIGMAPKEY))
      PULLREQUEST_API_ENDPOINT=$(echo -n "$GITREPO" | sed "s|github.com|api.github.com/repos|" | sed "s/\.git$//g")/pulls
      curl -v -u :$(cat $(workspaces.github-secret.path)/password) $PULLREQUEST_API_ENDPOINT -d '{"title":"$(params.PULL_REQUEST_TITLE)","body":"$(params.PULL_REQUEST_BODY)","head":"$(params.GIT_BRANCH_HEAD)","base":"$(params.GIT_BRANCH_BASE)"}'
---
# Source: pipelines/templates/tasks/github-push.yaml
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: github-push
spec:
  workspaces:
  - name: gitrepos
    description: The git repo will be cloned onto the volume backing this workspace
  params:
  - name: subdirectory
    description: subdirectory inside the "gitrepos" workspace to clone the git repo into
    type: string
    default: "dev"
  - name: PUSH_FLAGS
    description: additional flags for git push
    type: string
    default: ""
  steps:
  - name: push
    image: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.24.3
    script: |
      git remote -v
      git branch
      git branch -r | grep -q origin/$(git rev-parse --abbrev-ref HEAD) && git pull --ff-only --no-edit
      git log -n 2
      git push -v $(params.PUSH_FLAGS)
    workingDir: $(workspaces.gitrepos.path)/$(params.subdirectory)
---
# Source: pipelines/templates/tasks/gitops-imagetag.yaml
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: gitops-imagetag
spec:
  workspaces:
  - name: gitrepos
    description: The git repo will be cloned onto the volume backing this workspace
  - name: config
  params:
  - name: CONFIGMAP_PREFIX
    type: string
  - name: ENVIRONMENT
    type: string
    default: TEST
    description: TEST or PROD
  - name: TAG
    description: the VERSION tag
    type: string
  - name: TRUNCATE_IMAGESTREAM_TAGS_AFTER
    type: string
    description: Number of image stream tags to keep
    default: "4"
  - name: subdirectory
    description: subdirectory inside the "gitrepos" workspace to clone the git repo into
    type: string
    default: "ops"
  steps:
  - name: update-tag
    image: mikefarah/yq:latest
    script: |
      set -x
      TAG_VALUE=$(params.TAG)
      VALUES_PATH="$(cat $(workspaces.config.path)/$(params.CONFIGMAP_PREFIX)_$(params.ENVIRONMENT)_VALUES_PATH)"
      ls -al $VALUES_PATH
      YAML_PATH="$(cat $(workspaces.config.path)/$(params.CONFIGMAP_PREFIX)_YAML_PATH)"
      echo "$(params.CONFIGMAP_PREFIX)_YAML_PATH) : $YAML_PATH"
      yq "$YAML_PATH = \"$TAG_VALUE\"" $VALUES_PATH > $VALUES_PATH.tmp
      mv $VALUES_PATH.tmp $VALUES_PATH
    workingDir: $(workspaces.gitrepos.path)/$(params.subdirectory)
  - name: update-built-tags
    image: mikefarah/yq:latest
    script: |
      set -x
      TAG_VALUE=$(params.TAG)
      VALUES_PATH="$(cat $(workspaces.config.path)/$(params.CONFIGMAP_PREFIX)_$(params.ENVIRONMENT)_VALUES_PATH)"
      ls -al $VALUES_PATH
      BUILT_TAGS_PATH="$(cat $(workspaces.config.path)/$(params.CONFIGMAP_PREFIX)_BUILT_TAGS_PATH)"
      echo "$(params.CONFIGMAP_PREFIX)_BUILT_TAGS_PATH) : $BUILT_TAGS_PATH"
      yq "$BUILT_TAGS_PATH += [ \"$TAG_VALUE\" ]" $VALUES_PATH > $VALUES_PATH.tmp
      mv $VALUES_PATH.tmp $VALUES_PATH
    workingDir: $(workspaces.gitrepos.path)/$(params.subdirectory)
  - name: prune-built-tags
    image: mikefarah/yq:latest
    script: |
      set -x
      VALUES_PATH="$(cat $(workspaces.config.path)/$(params.CONFIGMAP_PREFIX)_$(params.ENVIRONMENT)_VALUES_PATH)"
      ls -al $VALUES_PATH
      BUILT_TAGS_PATH="$(cat $(workspaces.config.path)/$(params.CONFIGMAP_PREFIX)_BUILT_TAGS_PATH)"
      echo "$(params.CONFIGMAP_PREFIX)_BUILT_TAGS_PATH) : $BUILT_TAGS_PATH"
      ARRAY_COUNT=$(yq "$BUILT_TAGS_PATH | length" $VALUES_PATH)
      echo $ARRAY_COUNT
      if [ "$ARRAY_COUNT" -gt "$(params.TRUNCATE_IMAGESTREAM_TAGS_AFTER)" ]; then
        MIN_KEY=$(echo | yq "$ARRAY_COUNT - $(params.TRUNCATE_IMAGESTREAM_TAGS_AFTER)")
        yq "del(${BUILT_TAGS_PATH}[] | select(key < $MIN_KEY))" $VALUES_PATH > $VALUES_PATH.tmp
        mv $VALUES_PATH.tmp $VALUES_PATH
      else
        echo "$BUILT_TAGS_PATH currently has $ARRAY_COUNT tags, will prune at $(params.TRUNCATE_IMAGESTREAM_TAGS_AFTER)"
      fi
    workingDir: $(workspaces.gitrepos.path)/$(params.subdirectory)
---
# Source: pipelines/templates/tasks/mock.yaml
kind: Task
apiVersion: tekton.dev/v1beta1
metadata:
  name: mock
spec:
  params:
  - name: MESSAGE
    type: string
    description: |
      The message to echo.
    default: "Hello from mock-task"
  steps:
  - image: node  # contains node
    script: |
      #!/usr/bin/env node
      console.log("$(params.MESSAGE)")
---
# Source: pipelines/templates/tasks/openshift-instantiate-template.yaml
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: openshift-instantiate-template
spec:
  params:
  - name: TEMPLATE
    type: string
  - name: PARAMS
    type: string
  steps:
    - name: instantiate-template
      image: quay.io/openshift/origin-cli:latest
      script: |
        oc process $(params.TEMPLATE) $(params.PARAMS) | oc create -f -
---
# Source: pipelines/templates/tasks/s2i.yaml
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: s2i
spec:
  workspaces:
  - name: gitrepos
    description: The git repo will be cloned onto the volume backing this workspace
  - name: build-artifacts
    description: The maven repo for java builds
  results:
  - name: image
    description: The image+tag that was created
  params:
  - name: BUILDER_IMAGE
    description: The location of the s2i builder image.
    type: string
  - name: PATH_CONTEXT
    default: .
    description: The location of the path to run s2i from.
    type: string
  - name: TLSVERIFY
    default: "true"
    description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
    type: string
  - name: LOGLEVEL
    default: "0"
    description: Log level when running the S2I binary
    type: string
  - name: subdirectory
    default: "dev"
    description: subdirectory in the gitrepos workspace where the dev repo has been cloned to
    type: string
  - name: OUTPUT_IMAGE
    type: string
  - name: TAG
    default: latest
    type: string
# only for java builds
  - name: MAVEN_ARGS_APPEND
    default: ""
    description: Additional Maven arguments
    type: string
  - name: MAVEN_CLEAR_REPO
    default: "false"
    description: Remove the Maven repository after the artifact is built
    type: string
  - name: MAVEN_MIRROR_URL
    default: ""
    description: The base URL of a mirror used for retrieving artifacts
    type: string
  - name: CHAINED_BUILD_DOCKERFILE
    default: ""
    description: If a chained build is to be executed, the second part of the DOCKERFILE
    type: string
  steps:
  - name: prepare-env
    image: quay.io/openshift-pipeline/s2i
    script: |
      if [[ "$(params.BUILDER_IMAGE)" == *"jdk"* ]] || [[ "$(params.BUILDER_IMAGE)" == *"java"* ]]; then
        echo "MAVEN_CLEAR_REPO=$(params.MAVEN_CLEAR_REPO)" > env-file

        [[ '$(params.MAVEN_ARGS_APPEND)' != "" ]] &&
          echo "MAVEN_ARGS_APPEND=$(params.MAVEN_ARGS_APPEND)" >> env-file

        [[ '$(params.MAVEN_MIRROR_URL)' != "" ]] &&
          echo "MAVEN_MIRROR_URL=$(params.MAVEN_MIRROR_URL)" >> env-file

        #create build artifacts cache directory
        if [[ ! -d $(workspaces.build-artifacts.path)/m2 ]]; then
           mkdir $(workspaces.build-artifacts.path)/m2
           chmod a+rwx $(workspaces.build-artifacts.path)/m2
        fi
        echo "MAVEN_LOCAL_REPO=/ba/m2" >> env-file

        echo "Generated Env file"
        echo "------------------------------"
        cat env-file
        echo "------------------------------"

        echo "s2i build --loglevel=$(params.LOGLEVEL) $(params.PATH_CONTEXT) $(params.BUILDER_IMAGE) --image-scripts-url image:///usr/local/s2i --as-dockerfile /gen-source/Dockerfile.gen --environment-file /env-params/env-file" >s2icommand
        echo "buildah bud --tls-verify=$(params.TLSVERIFY) --storage-driver=vfs -f /gen-source/Dockerfile.gen -t `basename $(params.OUTPUT_IMAGE)` -v $(workspaces.build-artifacts.path)/m2:/ba/m2 ." >buildahcommand
      fi
    volumeMounts:
    - mountPath: /env-params
      name: envparams
    workingDir: /env-params
  - name: generate
    image: quay.io/openshift-pipeline/s2i
    # command:
    # - s2i
    # - build
    # - --loglevel=$(params.LOGLEVEL)
    # - $(params.PATH_CONTEXT)
    # - $(params.BUILDER_IMAGE)
    # - --as-dockerfile
    # - /gen-source/Dockerfile.gen
    script: |
      if [ -f /env-params/s2icommand ]; then
        source /env-params/s2icommand
      else
        s2i build --loglevel=$(params.LOGLEVEL) $(params.PATH_CONTEXT) $(params.BUILDER_IMAGE) --as-dockerfile /gen-source/Dockerfile.gen
      fi
      if [[ -n "$(params.CHAINED_BUILD_DOCKERFILE)" ]]; then
        echo "$(params.CHAINED_BUILD_DOCKERFILE)" >>/gen-source/Dockerfile.gen
      fi
    resources: {}
    volumeMounts:
    - mountPath: /gen-source
      name: gen-source
    - mountPath: /env-params
      name: envparams
    workingDir: $(workspaces.gitrepos.path)/$(params.subdirectory)
  - name: build
    image: quay.io/buildah/stable:v1.11.0
    script: |
      if [ -f /env-params/buildahcommand ]; then
        source /env-params/buildahcommand
      else
        buildah bud --tls-verify=$(params.TLSVERIFY) --storage-driver=vfs -f /gen-source/Dockerfile.gen -t `basename $(params.OUTPUT_IMAGE)` .
      fi
    resources: {}
    securityContext:
      privileged: false # LRC Changed from true
      capabilities:
        add: ["SETFCAP"]
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
    - mountPath: /gen-source
      name: gen-source
    - mountPath: /env-params
      name: envparams
    workingDir: /gen-source
  - name: push
    image: quay.io/buildah/stable:v1.11.0
    script: |
      buildah push --storage-driver=vfs --tls-verify=$(params.TLSVERIFY) `basename $(params.OUTPUT_IMAGE)` docker://$(params.OUTPUT_IMAGE):$(params.TAG)
      echo -n "$(params.OUTPUT_IMAGE):$(params.TAG)" >$(results.image.path)
    resources: {}
    securityContext:
      privileged: false # LRC Changed from true
      capabilities:
        add: ["SETFCAP"]
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
  volumes:
  - emptyDir: {}
    name: varlibcontainers
  - emptyDir: {}
    name: gen-source
  - emptyDir: {}
    name: envparams
---
# Source: pipelines/templates/tasks/skopeo-copy.yaml
kind: Task
apiVersion: tekton.dev/v1beta1
metadata:
  name: skopeo-copy
spec:
  workspaces:
  - name: config
    description: configmap contents
  params:
  - name: TAG
    type: string
  - name: SOURCE_IMAGE
    type: string
  - name: TARGET_IMAGE_CONFIGMAPKEY
    type: string
  steps:
  - name: skopeo-copy
    image: quay.io/redhat-emea-ssa-team/skopeo-ubi:latest
    script: |
      skopeo copy --src-tls-verify=false --dest-tls-verify=false docker://$(params.SOURCE_IMAGE):$(params.TAG) docker://$(cat $(workspaces.config.path)/IMAGE_PROVIDER)/$(cat $(workspaces.config.path)/IMAGE_ACCOUNT)/$(cat $(workspaces.config.path)/$(params.TARGET_IMAGE_CONFIGMAPKEY)):$(params.TAG)
---
# Source: pipelines/templates/tasks/tkn.yaml
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: tkn
spec:
  params:
  - name: tkn-image
    description: tkn CLI container image to run this task
    default: gcr.io/tekton-releases/dogfooding/tkn
  - name: ARGS
    type: array
    description: tkn CLI arguments to run
  steps:
    - name: tkn
      image: "$(params.tkn-image)"
      command: ["/usr/local/bin/tkn"]
      args: ["$(params.ARGS)"]
---
# Source: pipelines/templates/templates/build-image-bumpversion.yaml
apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: build-image-bumpversion
objects:
- apiVersion: tekton.dev/v1beta1
  kind: PipelineRun
  metadata:
    generateName: build-image-bumpversion-
  spec:
    pipelineRef:
      name: build-images
    workspaces:
    - name: config
      configMap:
        name: environment
    - name: gitrepos
      volumeClaimTemplate:
        spec:
          accessModes:
          - ReadWriteMany
          resources:
            requests:
              storage: 128Mi
      # persistentVolumeClaim:
      #   claimName: build-images
    params:
    - name: PATH_CONTEXT
      value: tekton/images/bumpversiontask
    - name: OUTPUT_IMAGE_PROVIDER_CONFIGMAPKEY
      value: IMAGE_PROVIDER
    - name: OUTPUT_IMAGE_ACCOUNT_CONFIGMAPKEY
      value: IMAGE_ACCOUNT
    - name: OUTPUT_IMAGE_NAME
      value: bumpversion
---
# Source: pipelines/templates/templates/build-image-httpd-ionic.yaml
apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: build-image-httpd-ionic
objects:
- apiVersion: tekton.dev/v1beta1
  kind: PipelineRun
  metadata:
    generateName: build-image-httpd-ionic-
  spec:
    pipelineRef:
      name: build-images
    workspaces:
    - name: config
      configMap:
        name: environment
    - name: gitrepos
      volumeClaimTemplate:
        spec:
          accessModes:
          - ReadWriteMany
          resources:
            requests:
              storage: 128Gi
      # persistentVolumeClaim:
      #   claimName: build-images
    params:
    - name: PATH_CONTEXT
      value: tekton/images/httpd-ionic
    - name: OUTPUT_IMAGE_PROVIDER_CONFIGMAPKEY
      value: IMAGE_PROVIDER
    - name: OUTPUT_IMAGE_ACCOUNT_CONFIGMAPKEY
      value: IMAGE_ACCOUNT
    - name: OUTPUT_IMAGE_NAME
      value: httpd-ionic
---
# Source: pipelines/templates/templates/build-image-pushprox.yaml
apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: build-image-pushprox
objects:
- apiVersion: tekton.dev/v1beta1
  kind: PipelineRun
  metadata:
    generateName: build-image-pushprox-
  spec:
    pipelineRef:
      name: build-images
    workspaces:
    - name: config
      configMap:
        name: environment
    - name: gitrepos
      volumeClaimTemplate:
        spec:
          accessModes:
          - ReadWriteMany
          resources:
            requests:
              storage: 128Mi
      # persistentVolumeClaim:
      #   claimName: build-images
    params:
    - name: PATH_CONTEXT
      value: tekton/images/pushprox
    - name: OUTPUT_IMAGE_PROVIDER_CONFIGMAPKEY
      value: IMAGE_PROVIDER
    - name: OUTPUT_IMAGE_ACCOUNT_CONFIGMAPKEY
      value: IMAGE_ACCOUNT
    - name: OUTPUT_IMAGE_NAME
      value: pushprox
    - name: DEV_REVISION
      value: pushprox
---
# Source: pipelines/templates/templates/build-iot-anomaly-detection.yaml
apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: build-iot-anomaly-detection
objects:
- apiVersion: tekton.dev/v1beta1
  kind: PipelineRun
  metadata:
    generateName: build-and-test-iot-anomaly-detection-
  spec:
    pipelineRef:
      name: build-and-test
    workspaces:
    - name: config
      configMap:
        name: environment
    - name: argocd-env-secret
      secret:
        secretName: argocd-env
    - name: build-artifacts
      # persistentVolumeClaim:
      #   claimName: build-artifacts
      volumeClaimTemplate:
        spec:
          accessModes:
          - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
    - name: gitrepos
      # persistentVolumeClaim:
      #   claimName: iot-anomaly-detection
      volumeClaimTemplate:
        spec:
          accessModes:
          - ReadWriteOnce
          resources:
            requests:
              storage: 128Mi
    params:
    - name: S2I_BUILDER_IMAGE
      value: registry.access.redhat.com/rhscl/python-36-rhel7
    - name: LOCAL_IMAGE
      value: image-registry.openshift-image-registry.svc:5000/manuela-tst-all/anomaly-detection
    - name: PATH_CONTEXT
      value: components/iot-anomaly-detection
    - name: COMPONENT_NAME
      value: iot-anomaly
    - name: CONFIGMAP_PREFIX
      value: IOT_ANOMALY
---
# Source: pipelines/templates/templates/build-iot-consumer.yaml
apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: build-iot-consumer
objects:
- apiVersion: tekton.dev/v1beta1
  kind: PipelineRun
  metadata:
    generateName: build-and-test-iot-consumer-
  spec:
    pipelineRef:
      name: build-and-test
    workspaces:
    - name: config
      configMap:
        name: environment
    - name: argocd-env-secret
      secret:
        secretName: argocd-env
    - name: build-artifacts
      # persistentVolumeClaim:
      #   claimName: build-artifacts
      volumeClaimTemplate:
        spec:
          accessModes:
          - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
    - name: gitrepos
      # persistentVolumeClaim:
      #   claimName: iot-consumer
      volumeClaimTemplate:
        spec:
          accessModes:
          - ReadWriteOnce
          resources:
            requests:
              storage: 128Mi
    params:
    - name: S2I_BUILDER_IMAGE
      value: registry.access.redhat.com/rhscl/nodejs-10-rhel7
    - name: LOCAL_IMAGE
      value: image-registry.openshift-image-registry.svc:5000/manuela-tst-all/messaging
    - name: PATH_CONTEXT
      value: components/iot-consumer
    - name: COMPONENT_NAME
      value: iot-consumer
    - name: CONFIGMAP_PREFIX
      value: IOT_CONSUMER
---
# Source: pipelines/templates/templates/build-iot-frontend.yaml
apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: build-iot-frontend
objects:
- apiVersion: tekton.dev/v1beta1
  kind: PipelineRun
  metadata:
    generateName: build-and-test-iot-frontend-
  spec:
    pipelineRef:
      name: build-and-test
    workspaces:
    - name: config
      configMap:
        name: environment
    - name: argocd-env-secret
      secret:
        secretName: argocd-env
    - name: build-artifacts
      # persistentVolumeClaim:
      #   claimName: build-artifacts
      volumeClaimTemplate:
        spec:
          accessModes:
          - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
    - name: gitrepos
      # persistentVolumeClaim:
      #   claimName: iot-frontend
      volumeClaimTemplate:
        spec:
          accessModes:
          - ReadWriteOnce
          resources:
            requests:
              storage: 128Mi
    params:
    - name: S2I_BUILDER_IMAGE
      value: quay.io/wolfgangntnx/ubi8-s2i-web-app
    - name: LOCAL_IMAGE
      value: image-registry.openshift-image-registry.svc:5000/manuela-tst-all/line-dashboard
    - name: PATH_CONTEXT
      value: components/iot-frontend
    - name: COMPONENT_NAME
      value: iot-frontend
    - name: CONFIGMAP_PREFIX
      value: IOT_FRONTEND
    - name: CHAINED_BUILD_DOCKERFILE
      #value: "FROM centos/httpd-24-centos7\nCOPY --from=0 /opt/app-root/output /var/www/html/"
      value: "FROM quay.io/manuela/httpd-ionic\nCOPY --from=0 /opt/app-root/output /var/www/html/"
---
# Source: pipelines/templates/templates/build-iot-software-sensor-quarkus.yaml
apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: build-iot-software-sensor-quarkus
objects:
- apiVersion: tekton.dev/v1beta1
  kind: PipelineRun
  metadata:
    generateName: build-and-test-iot-software-sensor-quarkus-
  spec:
    pipelineRef:
      name: build-and-test
    workspaces:
    - name: config
      configMap:
        name: environment
    - name: argocd-env-secret
      secret:
        secretName: argocd-env
    - name: build-artifacts
      # persistentVolumeClaim:
      #   claimName: build-artifacts
      volumeClaimTemplate:
        spec:
          accessModes:
          - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
    - name: gitrepos
      # persistentVolumeClaim:
      #   claimName: iot-software-sensor
      volumeClaimTemplate:
        spec:
          accessModes:
          - ReadWriteOnce
          resources:
            requests:
              storage: 128Mi
    params:
    - name: S2I_BUILDER_IMAGE
      value: quay.io/quarkus/ubi-quarkus-native-s2i:19.3.1-java11
    - name: LOCAL_IMAGE
      value: image-registry.openshift-image-registry.svc:5000/manuela-tst-all/machine-sensor
    - name: PATH_CONTEXT
      value: components/iot-software-sensor-quarkus
    - name: COMPONENT_NAME
      value: iot-swsensor
    - name: CONFIGMAP_PREFIX
      value: IOT_SWSENSOR
---
# Source: pipelines/templates/templates/build-iot-software-sensor.yaml
apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: build-iot-software-sensor
objects:
- apiVersion: tekton.dev/v1beta1
  kind: PipelineRun
  metadata:
    generateName: build-and-test-iot-software-sensor-
  spec:
    pipelineRef:
      name: build-and-test
    workspaces:
    - name: config
      configMap:
        name: environment
    - name: argocd-env-secret
      secret:
        secretName: argocd-env
    - name: build-artifacts
      # persistentVolumeClaim:
      #   claimName: build-artifacts
      volumeClaimTemplate:
        spec:
          accessModes:
          - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
    - name: gitrepos
      # persistentVolumeClaim:
      #   claimName: iot-software-sensor
      volumeClaimTemplate:
        spec:
          accessModes:
          - ReadWriteOnce
          resources:
            requests:
              storage: 128Mi
    params:
    - name: S2I_BUILDER_IMAGE
      value: registry.access.redhat.com/redhat-openjdk-18/openjdk18-openshift
    - name: LOCAL_IMAGE
      value: image-registry.openshift-image-registry.svc:5000/manuela-tst-all/machine-sensor
    - name: PATH_CONTEXT
      value: components/iot-software-sensor
    - name: COMPONENT_NAME
      value: iot-swsensor
    - name: CONFIGMAP_PREFIX
      value: IOT_SWSENSOR
---
# Source: pipelines/templates/templates/seed.yaml
apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: seed
objects:
- apiVersion: tekton.dev/v1beta1
  kind: PipelineRun
  metadata:
    generateName: seed-
  spec:
    pipelineRef:
      name: seed
    workspaces:
    - name: config
      configMap:
        name: environment
    - name: argocd-env-secret
      secret:
        secretName: argocd-env
    - name: build-artifacts
      # persistentVolumeClaim:
      #   claimName: build-artifacts
      volumeClaimTemplate:
        spec:
          accessModes:
          - ReadWriteMany
          resources:
            requests:
              storage: 1Gi
    - name: gitrepos
      # persistentVolumeClaim:
      #   claimName: iot-consumer
      volumeClaimTemplate:
        spec:
          accessModes:
          - ReadWriteMany
          resources:
            requests:
              storage: 1Gi
---
# Source: pipelines/templates/templates/stage-production-pipelinerun.yaml
apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: stage-production-pipelinerun
objects:
- apiVersion: tekton.dev/v1beta1
  kind: PipelineRun
  metadata:
    generateName: stage-production-${COMPONENT_NAME}-
  spec:
    pipelineRef:
      name: stage-production
    params:
    - name: TAG
      value: ${TAG}
    - name: SOURCE_IMAGE
      value: ${SOURCE_IMAGE}
    - name: CONFIGMAP_PREFIX
      value: ${CONFIGMAP_PREFIX}
    workspaces:
    - name: config
      configMap:
        name: environment
    - name: argocd-env-secret
      secret:
        secretName: argocd-env
    - name: github-secret
      secret:
        secretName: git-repo-credentials
    - name: gitrepos
      volumeClaimTemplate:
        spec:
          accessModes:
          - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
      # persistentVolumeClaim:
      #   claimName: stage-production
parameters:
- name: TAG
- name: SOURCE_IMAGE
- name: CONFIGMAP_PREFIX
- name: COMPONENT_NAME
